
CAMERA MODULE WITH STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f18  08004f18  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f18  08004f18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000220c  20000074  08004f94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002280  08004f94  00022280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e383  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002805  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00030c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00031c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019640  00000000  00000000  00032b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f44  00000000  00000000  0004c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbac  00000000  00000000  0005d104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eacb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  000ead00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080046a4 	.word	0x080046a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080046a4 	.word	0x080046a4

0800014c <ArduCAM_Init>:
 * Param NULL
 * Return NULL
 * Description Used for ArduCAM Initialisation
 */
void ArduCAM_Init(byte model) 
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	  wrSensorReg8_8(0xff, 0x01);
 8000156:	2101      	movs	r1, #1
 8000158:	20ff      	movs	r0, #255	; 0xff
 800015a:	f000 f91d 	bl	8000398 <wrSensorReg8_8>
      wrSensorReg8_8(0x12, 0x80);
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	2012      	movs	r0, #18
 8000162:	f000 f919 	bl	8000398 <wrSensorReg8_8>
      if(m_fmt == JPEG)
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <ArduCAM_Init+0x5c>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b01      	cmp	r3, #1
 800016c:	d114      	bne.n	8000198 <ArduCAM_Init+0x4c>
      {
		wrSensorRegs8_8(OV2640_JPEG_INIT);        //OV2640 JPEG Initialisation is done
 800016e:	480f      	ldr	r0, [pc, #60]	; (80001ac <ArduCAM_Init+0x60>)
 8000170:	f000 f9a0 	bl	80004b4 <wrSensorRegs8_8>
		wrSensorRegs8_8(OV2640_YUV422);          //Camera Data is converted to YUV 422
 8000174:	480e      	ldr	r0, [pc, #56]	; (80001b0 <ArduCAM_Init+0x64>)
 8000176:	f000 f99d 	bl	80004b4 <wrSensorRegs8_8>
		wrSensorRegs8_8(OV2640_JPEG);            //Camera Data converted from RGB 565 to OV2640 JPEG
 800017a:	480e      	ldr	r0, [pc, #56]	; (80001b4 <ArduCAM_Init+0x68>)
 800017c:	f000 f99a 	bl	80004b4 <wrSensorRegs8_8>
		wrSensorReg8_8(0xff, 0x01);             //Device Control Intialisation is done
 8000180:	2101      	movs	r1, #1
 8000182:	20ff      	movs	r0, #255	; 0xff
 8000184:	f000 f908 	bl	8000398 <wrSensorReg8_8>
		wrSensorReg8_8(0x15, 0x00);             //COM10 Register is Enabled
 8000188:	2100      	movs	r1, #0
 800018a:	2015      	movs	r0, #21
 800018c:	f000 f904 	bl	8000398 <wrSensorReg8_8>
		wrSensorRegs8_8(OV2640_320x240_JPEG);   //320*240 JPEG is enabled for OV2640
 8000190:	4809      	ldr	r0, [pc, #36]	; (80001b8 <ArduCAM_Init+0x6c>)
 8000192:	f000 f98f 	bl	80004b4 <wrSensorRegs8_8>
      }
      else
      {
        wrSensorRegs8_8(OV2640_QVGA);          //OV2640 QVGA is enabled
      }
}
 8000196:	e002      	b.n	800019e <ArduCAM_Init+0x52>
        wrSensorRegs8_8(OV2640_QVGA);          //OV2640 QVGA is enabled
 8000198:	4808      	ldr	r0, [pc, #32]	; (80001bc <ArduCAM_Init+0x70>)
 800019a:	f000 f98b 	bl	80004b4 <wrSensorRegs8_8>
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	08004aa4 	.word	0x08004aa4
 80001b0:	08004db0 	.word	0x08004db0
 80001b4:	08004dd8 	.word	0x08004dd8
 80001b8:	08004dfc 	.word	0x08004dfc
 80001bc:	080047a0 	.word	0x080047a0

080001c0 <CS_HIGH>:
 * Param NULL
 * Return NULL
 * Description Used for making CS Pin High
 */
void CS_HIGH(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(GPIOA, 4,GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2104      	movs	r1, #4
 80001c8:	4802      	ldr	r0, [pc, #8]	; (80001d4 <CS_HIGH+0x14>)
 80001ca:	f001 fee5 	bl	8001f98 <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800

080001d8 <CS_LOW>:
 * Param NULL
 * Return NULL
 * Description Used for making CS Pin Low
 */
void CS_LOW(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(GPIOA, 4,GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	2104      	movs	r1, #4
 80001e0:	4802      	ldr	r0, [pc, #8]	; (80001ec <CS_LOW+0x14>)
 80001e2:	f001 fed9 	bl	8001f98 <HAL_GPIO_WritePin>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010800 	.word	0x40010800

080001f0 <set_format>:
 * Param byte
 * Return NULL
 * Description Used for setting format
 */
void set_format(byte fmt)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
  if (fmt == JPEG)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d102      	bne.n	8000206 <set_format+0x16>
    m_fmt = JPEG;                    //JPEG Format is enabled
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <set_format+0x20>)
 8000202:	2201      	movs	r2, #1
 8000204:	701a      	strb	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000000 	.word	0x20000000

08000214 <bus_read>:
 * Param int
 * Return value
 * Description Used for reading camera commands from SPI
 */
uint8_t bus_read(int address)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	 uint8_t value;
     CS_LOW();                                 //Chip Select Made Low
 800021c:	f7ff ffdc 	bl	80001d8 <CS_LOW>
	 SPI1_ReadWriteByte(address);              //Address is passed to SPI Bus
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fd75 	bl	8000d14 <SPI1_ReadWriteByte>
	 value = SPI1_ReadWriteByte(0x00);
 800022a:	2000      	movs	r0, #0
 800022c:	f000 fd72 	bl	8000d14 <SPI1_ReadWriteByte>
 8000230:	4603      	mov	r3, r0
 8000232:	73fb      	strb	r3, [r7, #15]
	 CS_HIGH();                                //Chip Select Made High
 8000234:	f7ff ffc4 	bl	80001c0 <CS_HIGH>
	 return value;
 8000238:	7bfb      	ldrb	r3, [r7, #15]
}
 800023a:	4618      	mov	r0, r3
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <bus_write>:
 * Param int,int
 * Return value
 * Description Used for writing camera commands to SPI
 */
uint8_t bus_write(int address,int value)
{
 8000242:	b580      	push	{r7, lr}
 8000244:	b082      	sub	sp, #8
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	6039      	str	r1, [r7, #0]
	CS_LOW();                                    //Chip Select Made Low
 800024c:	f7ff ffc4 	bl	80001d8 <CS_LOW>
	delay_us(10);                                //10 microseconds delay
 8000250:	200a      	movs	r0, #10
 8000252:	f000 fa35 	bl	80006c0 <delay_us>
	SPI1_ReadWriteByte(address);                 //Send address to SPI Bus
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fd5a 	bl	8000d14 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(value);                   //Send Data to SPI Bus
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fd55 	bl	8000d14 <SPI1_ReadWriteByte>
	delay_us(10);                                //10 microseconds delay
 800026a:	200a      	movs	r0, #10
 800026c:	f000 fa28 	bl	80006c0 <delay_us>
	CS_HIGH();                                   //Chip Select Made High
 8000270:	f7ff ffa6 	bl	80001c0 <CS_HIGH>
	return 1;
 8000274:	2301      	movs	r3, #1
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <read_reg>:
 * Param uint8_t
 * Return data
 * Description Used for reading data from Arduchip Internal Register
 */
uint8_t read_reg(uint8_t addr)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b084      	sub	sp, #16
 8000282:	af00      	add	r7, sp, #0
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	data = bus_read(addr & 0x7F);               //Read camera commands from SPI
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800028e:	4618      	mov	r0, r3
 8000290:	f7ff ffc0 	bl	8000214 <bus_read>
 8000294:	4603      	mov	r3, r0
 8000296:	73fb      	strb	r3, [r7, #15]
	return data;
 8000298:	7bfb      	ldrb	r3, [r7, #15]
}
 800029a:	4618      	mov	r0, r3
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <write_reg>:
 * Param address,data
 * Return value
 * Description Used for writing data to Arduchip Internal Register
 */
void write_reg(uint8_t addr, uint8_t data)
{
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b082      	sub	sp, #8
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4603      	mov	r3, r0
 80002aa:	460a      	mov	r2, r1
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4613      	mov	r3, r2
 80002b0:	71bb      	strb	r3, [r7, #6]
	 bus_write(addr | 0x80, data);             //Write camera commands to SPI
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	79bb      	ldrb	r3, [r7, #6]
 80002be:	4619      	mov	r1, r3
 80002c0:	4610      	mov	r0, r2
 80002c2:	f7ff ffbe 	bl	8000242 <bus_write>
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}

080002ce <set_fifo_burst>:
 * Param NULL
 * Return NULL
 * Description Used for setting the read memory into burst read mode
 */
void set_fifo_burst()
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	af00      	add	r7, sp, #0
	SPI1_ReadWriteByte(BURST_FIFO_READ);           //Transmit and Receive Burst data from SPI
 80002d2:	203c      	movs	r0, #60	; 0x3c
 80002d4:	f000 fd1e 	bl	8000d14 <SPI1_ReadWriteByte>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <flush_fifo>:
 * Param NULL
 * Return NULL
 * Description Used for reset the pointer to zero
 */
void flush_fifo(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);     //Clear capture flag
 80002e0:	2101      	movs	r1, #1
 80002e2:	2004      	movs	r0, #4
 80002e4:	f7ff ffdd 	bl	80002a2 <write_reg>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <start_capture>:
 * Param NULL
 * Return NULL
 * Description Used for issuing capture command
 */
void start_capture(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_START_MASK);      //Enable capture command for camera
 80002f0:	2102      	movs	r1, #2
 80002f2:	2004      	movs	r0, #4
 80002f4:	f7ff ffd5 	bl	80002a2 <write_reg>
}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}

080002fc <clear_fifo_flag>:
 * Param NULL
 * Return NULL
 * Description Used for clearing capture flag so that next command can be processed
 */
void clear_fifo_flag(void )
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK);      //reset fifo pointer too zero
 8000300:	2101      	movs	r1, #1
 8000302:	2004      	movs	r0, #4
 8000304:	f7ff ffcd 	bl	80002a2 <write_reg>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}

0800030c <read_fifo_length>:
 * Param NULL
 * Return len
 * Description Used for determining the length of current captured image
 */
uint32_t read_fifo_length(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
	uint32_t len1,len2,len3,len=0;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
	len1 = read_reg(FIFO_SIZE1);
 8000316:	2042      	movs	r0, #66	; 0x42
 8000318:	f7ff ffb1 	bl	800027e <read_reg>
 800031c:	4603      	mov	r3, r0
 800031e:	60bb      	str	r3, [r7, #8]
	len2 = read_reg(FIFO_SIZE2);
 8000320:	2043      	movs	r0, #67	; 0x43
 8000322:	f7ff ffac 	bl	800027e <read_reg>
 8000326:	4603      	mov	r3, r0
 8000328:	607b      	str	r3, [r7, #4]
	len3 = read_reg(FIFO_SIZE3) & 0x7f;
 800032a:	2044      	movs	r0, #68	; 0x44
 800032c:	f7ff ffa7 	bl	800027e <read_reg>
 8000330:	4603      	mov	r3, r0
 8000332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000336:	603b      	str	r3, [r7, #0]
	len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	041a      	lsls	r2, r3, #16
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	431a      	orrs	r2, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	4313      	orrs	r3, r2
 8000346:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800034a:	60fb      	str	r3, [r7, #12]
	return len;	
 800034c:	68fb      	ldr	r3, [r7, #12]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <get_bit>:
 * Param address,bit
 * Return temp
 * Description Used for return trigger bit needed for ArduCAM OV2640
 */
uint8_t get_bit(uint8_t addr, uint8_t bit)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b084      	sub	sp, #16
 800035a:	af00      	add	r7, sp, #0
 800035c:	4603      	mov	r3, r0
 800035e:	460a      	mov	r2, r1
 8000360:	71fb      	strb	r3, [r7, #7]
 8000362:	4613      	mov	r3, r2
 8000364:	71bb      	strb	r3, [r7, #6]
  uint8_t temp;
  temp = read_reg(addr);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff88 	bl	800027e <read_reg>
 800036e:	4603      	mov	r3, r0
 8000370:	73fb      	strb	r3, [r7, #15]
  temp = temp & bit;
 8000372:	7bfa      	ldrb	r2, [r7, #15]
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	4013      	ands	r3, r2
 8000378:	73fb      	strb	r3, [r7, #15]
  return temp;
 800037a:	7bfb      	ldrb	r3, [r7, #15]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <OV2640_set_JPEG_size>:
 * Param size
 * Return NULL
 * Description Used for setting resolution of 320*240
 */
void OV2640_set_JPEG_size()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
		wrSensorRegs8_8(OV2640_320x240_JPEG);
 8000388:	4802      	ldr	r0, [pc, #8]	; (8000394 <OV2640_set_JPEG_size+0x10>)
 800038a:	f000 f893 	bl	80004b4 <wrSensorRegs8_8>

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	08004dfc 	.word	0x08004dfc

08000398 <wrSensorReg8_8>:
 * Param regID~register address,regDat~register Data
 * Return int
 * Description Used for write a single sensors internal register over I2C
 */
byte wrSensorReg8_8(int regID, int regDat)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
	delay_us(5);                                  //5 microseconds delay
 80003a2:	2005      	movs	r0, #5
 80003a4:	f000 f98c 	bl	80006c0 <delay_us>
	I2C_Start();                             //I2C Start
 80003a8:	f000 f8e8 	bl	800057c <I2C_Start>
	if(I2C_Write_Byte(sensor_addr) == 0)     //Used for checking sensor address
 80003ac:	4b18      	ldr	r3, [pc, #96]	; (8000410 <wrSensorReg8_8+0x78>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f926 	bl	8000602 <I2C_Write_Byte>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d103      	bne.n	80003c4 <wrSensorReg8_8+0x2c>
	{
		I2C_Stop();                          //I2c Stop
 80003bc:	f000 f8f6 	bl	80005ac <I2C_Stop>
		return 1;
 80003c0:	2301      	movs	r3, #1
 80003c2:	e020      	b.n	8000406 <wrSensorReg8_8+0x6e>
	}
	delay_us(5);                                  //5 microseconds delay
 80003c4:	2005      	movs	r0, #5
 80003c6:	f000 f97b 	bl	80006c0 <delay_us>
	if(I2C_Write_Byte(regID) == 0)           //Used for checking sensor address
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 f917 	bl	8000602 <I2C_Write_Byte>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d103      	bne.n	80003e2 <wrSensorReg8_8+0x4a>
	{
		I2C_Stop();                          //I2C Stop
 80003da:	f000 f8e7 	bl	80005ac <I2C_Stop>
		return 2;                                       
 80003de:	2302      	movs	r3, #2
 80003e0:	e011      	b.n	8000406 <wrSensorReg8_8+0x6e>
	}
	delay_us(5);                                  //5 microseconds delay
 80003e2:	2005      	movs	r0, #5
 80003e4:	f000 f96c 	bl	80006c0 <delay_us>
	if(I2C_Write_Byte(regDat)==0)            //Used for checking register data
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 f908 	bl	8000602 <I2C_Write_Byte>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d103      	bne.n	8000400 <wrSensorReg8_8+0x68>
	{
		I2C_Stop();                          //I2C Stop
 80003f8:	f000 f8d8 	bl	80005ac <I2C_Stop>
		return 3;
 80003fc:	2303      	movs	r3, #3
 80003fe:	e002      	b.n	8000406 <wrSensorReg8_8+0x6e>
	}
	I2C_Stop();                              //I2C Stop
 8000400:	f000 f8d4 	bl	80005ac <I2C_Stop>
	return 0;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000091 	.word	0x20000091

08000414 <rdSensorReg8_8>:
 * Return regDat
 * Description Used for reading single sensor internal register value
 */

byte rdSensorReg8_8(uint8_t regID, uint8_t* regDat)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	6039      	str	r1, [r7, #0]
 800041e:	71fb      	strb	r3, [r7, #7]
	delay_us(10);                                       //10 microseconds delay
 8000420:	200a      	movs	r0, #10
 8000422:	f000 f94d 	bl	80006c0 <delay_us>
	I2C_Start();
 8000426:	f000 f8a9 	bl	800057c <I2C_Start>
	if(I2C_Write_Byte(sensor_addr) == 0)           //Checks for sensor address
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <rdSensorReg8_8+0x9c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f8e7 	bl	8000602 <I2C_Write_Byte>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d103      	bne.n	8000442 <rdSensorReg8_8+0x2e>
	{
		I2C_Stop();                                //I2C Stop
 800043a:	f000 f8b7 	bl	80005ac <I2C_Stop>
		return 1;                                        
 800043e:	2301      	movs	r3, #1
 8000440:	e031      	b.n	80004a6 <rdSensorReg8_8+0x92>
	}
	delay_us(10);                                       //10 microseconds delay
 8000442:	200a      	movs	r0, #10
 8000444:	f000 f93c 	bl	80006c0 <delay_us>
	if (I2C_Write_Byte(regID)==0)                  //Checks for Register address
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f8d9 	bl	8000602 <I2C_Write_Byte>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d103      	bne.n	800045e <rdSensorReg8_8+0x4a>
	{
		I2C_Stop();                                //I2C Stop
 8000456:	f000 f8a9 	bl	80005ac <I2C_Stop>
		return 2;                                       
 800045a:	2302      	movs	r3, #2
 800045c:	e023      	b.n	80004a6 <rdSensorReg8_8+0x92>
	}
	I2C_Stop();                                    //I2C Stop
 800045e:	f000 f8a5 	bl	80005ac <I2C_Stop>
	delay_us(10);                                       //10 microseconds delay
 8000462:	200a      	movs	r0, #10
 8000464:	f000 f92c 	bl	80006c0 <delay_us>
	I2C_Start();                                   //I2C Start
 8000468:	f000 f888 	bl	800057c <I2C_Start>
	if(I2C_Write_Byte(sensor_addr|0x01)==0)
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <rdSensorReg8_8+0x9c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f8c3 	bl	8000602 <I2C_Write_Byte>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d103      	bne.n	800048a <rdSensorReg8_8+0x76>
	{
		I2C_Stop();                                //I2C stop
 8000482:	f000 f893 	bl	80005ac <I2C_Stop>
		return 3;                                          
 8000486:	2303      	movs	r3, #3
 8000488:	e00d      	b.n	80004a6 <rdSensorReg8_8+0x92>
	}
	delay_us(10);                                       //10 microseconds delay
 800048a:	200a      	movs	r0, #10
 800048c:	f000 f918 	bl	80006c0 <delay_us>
	*regDat = I2C_Read_Byte();                     //register data is received via I2C
 8000490:	f000 f8f0 	bl	8000674 <I2C_Read_Byte>
 8000494:	4603      	mov	r3, r0
 8000496:	461a      	mov	r2, r3
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	701a      	strb	r2, [r3, #0]
	I2C_NoACK();                              //No acknowledgement received
 800049c:	f000 f899 	bl	80005d2 <I2C_NoACK>
	I2C_Stop();                                    //I2C stop
 80004a0:	f000 f884 	bl	80005ac <I2C_Stop>
	return 0;                
 80004a4:	2300      	movs	r3, #0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000091 	.word	0x20000091

080004b4 <wrSensorRegs8_8>:
 * Param reglist[]
 * Return error status
 * Description Used for write array of settings into sensor's internal register over I2C
 */
int wrSensorRegs8_8(const struct sensor_reg reglist[])
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  int err = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  uint16_t reg_addr = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	827b      	strh	r3, [r7, #18]
  uint16_t reg_val = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	823b      	strh	r3, [r7, #16]
  const struct sensor_reg *next = reglist;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff))         //Checks whether register address or register data is equal to 0xFF or not
 80004cc:	e010      	b.n	80004f0 <wrSensorRegs8_8+0x3c>
  {
    reg_addr = next->reg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	827b      	strh	r3, [r7, #18]
    reg_val = next->val;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	885b      	ldrh	r3, [r3, #2]
 80004d8:	823b      	strh	r3, [r7, #16]
    err = wrSensorReg8_8(reg_addr, reg_val);            //used for checking error status
 80004da:	8a7b      	ldrh	r3, [r7, #18]
 80004dc:	8a3a      	ldrh	r2, [r7, #16]
 80004de:	4611      	mov	r1, r2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff59 	bl	8000398 <wrSensorReg8_8>
 80004e6:	4603      	mov	r3, r0
 80004e8:	617b      	str	r3, [r7, #20]
    next++;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3304      	adds	r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
  while ((reg_addr != 0xff) | (reg_val != 0xff))         //Checks whether register address or register data is equal to 0xFF or not
 80004f0:	8a7b      	ldrh	r3, [r7, #18]
 80004f2:	2bff      	cmp	r3, #255	; 0xff
 80004f4:	bf14      	ite	ne
 80004f6:	2301      	movne	r3, #1
 80004f8:	2300      	moveq	r3, #0
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	8a3b      	ldrh	r3, [r7, #16]
 80004fe:	2bff      	cmp	r3, #255	; 0xff
 8000500:	bf14      	ite	ne
 8000502:	2301      	movne	r3, #1
 8000504:	2300      	moveq	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4313      	orrs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1de      	bne.n	80004ce <wrSensorRegs8_8+0x1a>
  }
  return err;
 8000510:	697b      	ldr	r3, [r7, #20]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <I2C_Clock_High>:
  * Return NULL
  * Param NULL
  * Description Used for making clock high
  */
 void I2C_Clock_High()
 {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOB,11,SET);
 8000520:	2201      	movs	r2, #1
 8000522:	210b      	movs	r1, #11
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <I2C_Clock_High+0x14>)
 8000526:	f001 fd37 	bl	8001f98 <HAL_GPIO_WritePin>
 }
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010c00 	.word	0x40010c00

08000534 <I2C_Clock_Low>:
  * Return NULL
  * Param NULL
  * Description Used for making clock low
  */
 void I2C_Clock_Low()
  {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
 	 HAL_GPIO_WritePin(GPIOB,11,RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	210b      	movs	r1, #11
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <I2C_Clock_Low+0x14>)
 800053e:	f001 fd2b 	bl	8001f98 <HAL_GPIO_WritePin>
  }
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40010c00 	.word	0x40010c00

0800054c <I2C_Data_High>:
   * Return NULL
   * Param NULL
   * Description Used for making Data High
   */
 void I2C_Data_High()
 {
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(GPIOB,10,SET);
 8000550:	2201      	movs	r2, #1
 8000552:	210a      	movs	r1, #10
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <I2C_Data_High+0x14>)
 8000556:	f001 fd1f 	bl	8001f98 <HAL_GPIO_WritePin>
 }
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010c00 	.word	0x40010c00

08000564 <I2C_Data_Low>:
    * Return NULL
    * Param NULL
    * Description Used for making Data High
    */
 void I2C_Data_Low()
  {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
 	 HAL_GPIO_WritePin(GPIOB,10,RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	210a      	movs	r1, #10
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <I2C_Data_Low+0x14>)
 800056e:	f001 fd13 	bl	8001f98 <HAL_GPIO_WritePin>
  }
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40010c00 	.word	0x40010c00

0800057c <I2C_Start>:
  * Return NULL
  * Param NULL
  * Description Used for I2C Start
  */
void I2C_Start(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    I2C_Data_High();                   //I2C data made high
 8000580:	f7ff ffe4 	bl	800054c <I2C_Data_High>
    delay_us(I2C_TIM);                 //1 microsecond delay
 8000584:	2001      	movs	r0, #1
 8000586:	f000 f89b 	bl	80006c0 <delay_us>
    I2C_Clock_High();                  //I2C data made low
 800058a:	f7ff ffc7 	bl	800051c <I2C_Clock_High>
    delay_us(I2C_TIM);                  //1 microsecond delay
 800058e:	2001      	movs	r0, #1
 8000590:	f000 f896 	bl	80006c0 <delay_us>
    I2C_Data_Low();                    //I2C data made low
 8000594:	f7ff ffe6 	bl	8000564 <I2C_Data_Low>
    delay_us(I2C_TIM);                 //1 microsecond delay
 8000598:	2001      	movs	r0, #1
 800059a:	f000 f891 	bl	80006c0 <delay_us>
    I2C_Clock_Low();                   //I2C clock made low
 800059e:	f7ff ffc9 	bl	8000534 <I2C_Clock_Low>
    delay_us(I2C_TIM);                 //1 microsecond delay
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 f88c 	bl	80006c0 <delay_us>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <I2C_Stop>:
 * Return NULL
 * Param NULL
 * Description Used for I2C Stop
 */
void I2C_Stop(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    I2C_Data_Low();                     //I2C Data Bus Made Low
 80005b0:	f7ff ffd8 	bl	8000564 <I2C_Data_Low>
    delay_us(I2C_TIM);                  //1 microsecond delay
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 f883 	bl	80006c0 <delay_us>
    I2C_Clock_High();                   //I2C Clock Bus Made High
 80005ba:	f7ff ffaf 	bl	800051c <I2C_Clock_High>
    delay_us(I2C_TIM);                  //1 microsecond delay
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 f87e 	bl	80006c0 <delay_us>
    I2C_Data_High();                    //I2C Data Bus Made High
 80005c4:	f7ff ffc2 	bl	800054c <I2C_Data_High>
    delay_us(I2C_TIM);                  //1 microsecond delay
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 f879 	bl	80006c0 <delay_us>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <I2C_NoACK>:
 * Param NULL
 * Description Used for Intialising No Acknowledgment
 */

void I2C_NoACK(void)
{	
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
	I2C_Data_High();                      //I2C Data Bus Made High
 80005d6:	f7ff ffb9 	bl	800054c <I2C_Data_High>
	delay_us(I2C_TIM);                    //1 microsecond delay
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 f870 	bl	80006c0 <delay_us>
	I2C_Clock_High();                     //I2C Clock Bus Made High
 80005e0:	f7ff ff9c 	bl	800051c <I2C_Clock_High>
	delay_us(I2C_TIM);                    //1 microsecond delay
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f86b 	bl	80006c0 <delay_us>
	I2C_Clock_Low();                      //I2C Clock Bus Made High
 80005ea:	f7ff ffa3 	bl	8000534 <I2C_Clock_Low>
	delay_us(I2C_TIM);                    //1 microsecond delay
 80005ee:	2001      	movs	r0, #1
 80005f0:	f000 f866 	bl	80006c0 <delay_us>
	I2C_Data_Low();                       //I2C Data Bus Made Low
 80005f4:	f7ff ffb6 	bl	8000564 <I2C_Data_Low>
	delay_us(I2C_TIM);                    //1 microsecond delay
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 f861 	bl	80006c0 <delay_us>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}

08000602 <I2C_Write_Byte>:
 * Return tem
 * Param data
 * Description Used for writing I2C data
 */
uint8_t I2C_Write_Byte(uint8_t data)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint8_t tem;
	for(i = 0; i < 8; i++) 
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e019      	b.n	8000646 <I2C_Write_Byte+0x44>
	{
		if((data<<i) & 0x80)                   //Input data value in SDA Pin
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <I2C_Write_Byte+0x26>
		{
			I2C_Data_High();                  //I2C Data Bus made High
 8000622:	f7ff ff93 	bl	800054c <I2C_Data_High>
 8000626:	e001      	b.n	800062c <I2C_Write_Byte+0x2a>
		}
		else 
		{
			I2C_Data_Low();                   //I2C Data Bus made Low
 8000628:	f7ff ff9c 	bl	8000564 <I2C_Data_Low>
		}
		delay_us(I2C_TIM);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 f847 	bl	80006c0 <delay_us>
		I2C_Clock_High();
 8000632:	f7ff ff73 	bl	800051c <I2C_Clock_High>
		delay_us(I2C_TIM);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f842 	bl	80006c0 <delay_us>
		I2C_Clock_Low();
 800063c:	f7ff ff7a 	bl	8000534 <I2C_Clock_Low>
	for(i = 0; i < 8; i++) 
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b07      	cmp	r3, #7
 800064a:	d9e2      	bls.n	8000612 <I2C_Write_Byte+0x10>

	}
	delay_us(I2C_TIM);                      //1 microsecond delay
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f837 	bl	80006c0 <delay_us>
	I2C_Clock_High();
 8000652:	f7ff ff63 	bl	800051c <I2C_Clock_High>
	delay_us(I2C_TIM);                      //1 microsecond delay
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f832 	bl	80006c0 <delay_us>
	{
		tem = 0;               
	}
	else 
	{
		tem = 1;                
 800065c:	2301      	movs	r3, #1
 800065e:	72fb      	strb	r3, [r7, #11]
	}
	I2C_Clock_Low();                       //I2C Clock Bus Made Low
 8000660:	f7ff ff68 	bl	8000534 <I2C_Clock_Low>
	delay_us(I2C_TIM);                     //1 microsecond delay
 8000664:	2001      	movs	r0, #1
 8000666:	f000 f82b 	bl	80006c0 <delay_us>
	return tem;  
 800066a:	7afb      	ldrb	r3, [r7, #11]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <I2C_Read_Byte>:
 * Return read
 * Param NULL
 * Description Used for Reading I2C Data
 */
uint8_t I2C_Read_Byte(void)
{	
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t read = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	70fb      	strb	r3, [r7, #3]
	delay_us(I2C_TIM);                     //1 mircosecond delay
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f81e 	bl	80006c0 <delay_us>
	for(i = 8; i > 0; i--) 
 8000684:	2308      	movs	r3, #8
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e012      	b.n	80006b0 <I2C_Read_Byte+0x3c>
	{		     
		delay_us(I2C_TIM);                 //1 mircosecond delay
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f818 	bl	80006c0 <delay_us>
		I2C_Clock_High();                  //Clock bus made High
 8000690:	f7ff ff44 	bl	800051c <I2C_Clock_High>
		delay_us(I2C_TIM);                 //1 mircosecond delay
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f813 	bl	80006c0 <delay_us>
		read = read << 1;                  //Capture receive bit
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	70fb      	strb	r3, [r7, #3]
		if(I2C_SDA_Pin==1)
		{
			read += 1; 
		}
		I2C_Clock_Low();                    //Clock bus made High
 80006a0:	f7ff ff48 	bl	8000534 <I2C_Clock_Low>
		delay_us(I2C_TIM);                  //1 mircosecond delay
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 f80b 	bl	80006c0 <delay_us>
	for(i = 8; i > 0; i--) 
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1e9      	bne.n	800068a <I2C_Read_Byte+0x16>
	}	
	return read;
 80006b6:	78fb      	ldrb	r3, [r7, #3]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <delay_us>:
 * Param uint16_t
 * Return NULL
 * Description Used for creating micro-seciond delay
 */
void delay_us(uint16_t delay)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <delay_us+0x2c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)<delay);
 80006d2:	bf00      	nop
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <delay_us+0x2c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d3f9      	bcc.n	80006d4 <delay_us+0x14>
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000134 	.word	0x20000134

080006f0 <main>:

int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  HAL_Init();                    //HAL Initialisation
 80006f4:	f000 ffa0 	bl	8001638 <HAL_Init>
  SystemClock_Config();          //System Clock Initialisation
 80006f8:	f000 f960 	bl	80009bc <SystemClock_Config>
  MX_GPIO_Init();                //GPIO Intialisation
 80006fc:	f000 faa4 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();                 //DMA Initialisation
 8000700:	f000 fa7c 	bl	8000bfc <MX_DMA_Init>
  MX_SPI1_Init();                //SPI1 Initialisation
 8000704:	f000 f9a0 	bl	8000a48 <MX_SPI1_Init>
  MX_USART1_UART_Init();         //USART1 Initialisation
 8000708:	f000 fa24 	bl	8000b54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();         //USART2 Initialisation
 800070c:	f000 fa4c 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_TIM1_Init();                //TIM1 Initialisation
 8000710:	f000 f9d0 	bl	8000ab4 <MX_TIM1_Init>

  while (1)
		{
			sensor_addr = 0x60;                      //Camera Module Sensor Address Initiated
 8000714:	4b98      	ldr	r3, [pc, #608]	; (8000978 <main+0x288>)
 8000716:	2260      	movs	r2, #96	; 0x60
 8000718:	701a      	strb	r2, [r3, #0]
			wrSensorReg8_8(0xff, 0x01);              //
 800071a:	2101      	movs	r1, #1
 800071c:	20ff      	movs	r0, #255	; 0xff
 800071e:	f7ff fe3b 	bl	8000398 <wrSensorReg8_8>
			rdSensorReg8_8(OV2640_CHIPID_HIGH, &vid); //Used for reading VID value
 8000722:	4996      	ldr	r1, [pc, #600]	; (800097c <main+0x28c>)
 8000724:	200a      	movs	r0, #10
 8000726:	f7ff fe75 	bl	8000414 <rdSensorReg8_8>
			rdSensorReg8_8(OV2640_CHIPID_LOW, &pid);  //Used for reading PID value
 800072a:	4995      	ldr	r1, [pc, #596]	; (8000980 <main+0x290>)
 800072c:	200b      	movs	r0, #11
 800072e:	f7ff fe71 	bl	8000414 <rdSensorReg8_8>
			if ((vid != 0x26 ) && (( pid != 0x41 ) || ( pid != 0x42 ))) //OV2640 Module Not detected
 8000732:	4b92      	ldr	r3, [pc, #584]	; (800097c <main+0x28c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b26      	cmp	r3, #38	; 0x26
 8000738:	d00b      	beq.n	8000752 <main+0x62>
 800073a:	4b91      	ldr	r3, [pc, #580]	; (8000980 <main+0x290>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b41      	cmp	r3, #65	; 0x41
 8000740:	d103      	bne.n	800074a <main+0x5a>
 8000742:	4b8f      	ldr	r3, [pc, #572]	; (8000980 <main+0x290>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b42      	cmp	r3, #66	; 0x42
 8000748:	d003      	beq.n	8000752 <main+0x62>
				printf("ACK CMD Can't find OV2640 module!\r\n");
 800074a:	488e      	ldr	r0, [pc, #568]	; (8000984 <main+0x294>)
 800074c:	f003 fb22 	bl	8003d94 <puts>
			sensor_addr = 0x60;                      //Camera Module Sensor Address Initiated
 8000750:	e7e0      	b.n	8000714 <main+0x24>
			else
			{
			  sensor_model =  OV2640 ;                         //OV2640 Module Not detected
 8000752:	4b8d      	ldr	r3, [pc, #564]	; (8000988 <main+0x298>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
			  printf("ACK CMD OV2640 detected.\r\n");
 8000758:	488c      	ldr	r0, [pc, #560]	; (800098c <main+0x29c>)
 800075a:	f003 fb1b 	bl	8003d94 <puts>
			  break;
 800075e:	bf00      	nop
			}
		}
	  ArduCAM_Init(sensor_model);     //If module detected will be calling this ArduCAM Initialisation function
 8000760:	4b89      	ldr	r3, [pc, #548]	; (8000988 <main+0x298>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fcf1 	bl	800014c <ArduCAM_Init>

		while(1)
		{
			if(NewCMD == 1)                  //If data is received from UART
 800076a:	4b89      	ldr	r3, [pc, #548]	; (8000990 <main+0x2a0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	f040 80a4 	bne.w	80008bc <main+0x1cc>
			{
				NewCMD = 0;
 8000774:	4b86      	ldr	r3, [pc, #536]	; (8000990 <main+0x2a0>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
				switch(USART1_ReceiveData)
 800077a:	4b86      	ldr	r3, [pc, #536]	; (8000994 <main+0x2a4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	2b2f      	cmp	r3, #47	; 0x2f
 8000782:	f200 809d 	bhi.w	80008c0 <main+0x1d0>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <main+0x9c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	0800084d 	.word	0x0800084d
 8000790:	080008c1 	.word	0x080008c1
 8000794:	080008c1 	.word	0x080008c1
 8000798:	080008c1 	.word	0x080008c1
 800079c:	080008c1 	.word	0x080008c1
 80007a0:	080008c1 	.word	0x080008c1
 80007a4:	080008c1 	.word	0x080008c1
 80007a8:	080008c1 	.word	0x080008c1
 80007ac:	080008c1 	.word	0x080008c1
 80007b0:	080008c1 	.word	0x080008c1
 80007b4:	080008c1 	.word	0x080008c1
 80007b8:	080008c1 	.word	0x080008c1
 80007bc:	080008c1 	.word	0x080008c1
 80007c0:	080008c1 	.word	0x080008c1
 80007c4:	080008c1 	.word	0x080008c1
 80007c8:	08000861 	.word	0x08000861
 80007cc:	08000875 	.word	0x08000875
 80007d0:	080008c1 	.word	0x080008c1
 80007d4:	080008c1 	.word	0x080008c1
 80007d8:	080008c1 	.word	0x080008c1
 80007dc:	080008c1 	.word	0x080008c1
 80007e0:	080008c1 	.word	0x080008c1
 80007e4:	080008c1 	.word	0x080008c1
 80007e8:	080008c1 	.word	0x080008c1
 80007ec:	080008c1 	.word	0x080008c1
 80007f0:	080008c1 	.word	0x080008c1
 80007f4:	080008c1 	.word	0x080008c1
 80007f8:	080008c1 	.word	0x080008c1
 80007fc:	080008c1 	.word	0x080008c1
 8000800:	080008c1 	.word	0x080008c1
 8000804:	080008c1 	.word	0x080008c1
 8000808:	08000887 	.word	0x08000887
 800080c:	0800089b 	.word	0x0800089b
 8000810:	080008c1 	.word	0x080008c1
 8000814:	080008c1 	.word	0x080008c1
 8000818:	080008c1 	.word	0x080008c1
 800081c:	080008c1 	.word	0x080008c1
 8000820:	080008c1 	.word	0x080008c1
 8000824:	080008c1 	.word	0x080008c1
 8000828:	080008c1 	.word	0x080008c1
 800082c:	080008c1 	.word	0x080008c1
 8000830:	080008c1 	.word	0x080008c1
 8000834:	080008c1 	.word	0x080008c1
 8000838:	080008c1 	.word	0x080008c1
 800083c:	080008c1 	.word	0x080008c1
 8000840:	080008c1 	.word	0x080008c1
 8000844:	080008c1 	.word	0x080008c1
 8000848:	080008a9 	.word	0x080008a9
				{
					case 1:
						if(sensor_model== OV2640)         //If model detected is OV2640 will set JPEG Mode
 800084c:	4b4e      	ldr	r3, [pc, #312]	; (8000988 <main+0x298>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d137      	bne.n	80008c4 <main+0x1d4>
						{
							OV2640_set_JPEG_size();
 8000854:	f7ff fd96 	bl	8000384 <OV2640_set_JPEG_size>
							printf("ACK CMD switch to OV2640_320x240\r\n");
 8000858:	484f      	ldr	r0, [pc, #316]	; (8000998 <main+0x2a8>)
 800085a:	f003 fa9b 	bl	8003d94 <puts>
						}
						break;
 800085e:	e031      	b.n	80008c4 <main+0x1d4>
					case 0x10:                         // If 0x10 is detected will be used to capture JPEG photo
						camera_test = 1;
 8000860:	4b4e      	ldr	r3, [pc, #312]	; (800099c <main+0x2ac>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
						start_flag = 1;
 8000866:	4b4e      	ldr	r3, [pc, #312]	; (80009a0 <main+0x2b0>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
						printf("ACK CMD CAM start single shoot.\r\n");
 800086c:	484d      	ldr	r0, [pc, #308]	; (80009a4 <main+0x2b4>)
 800086e:	f003 fa91 	bl	8003d94 <puts>
						break;
 8000872:	e028      	b.n	80008c6 <main+0x1d6>
					case 0x11:                       // If 0x11 ,set camera to JPEG output mode.
						set_format(JPEG);
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fcbb 	bl	80001f0 <set_format>
						ArduCAM_Init(sensor_model);
 800087a:	4b43      	ldr	r3, [pc, #268]	; (8000988 <main+0x298>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fc64 	bl	800014c <ArduCAM_Init>
						break;
 8000884:	e01f      	b.n	80008c6 <main+0x1d6>
					case 0x20:                     //If 0x20 is received will capture JPEG photo and write data continously to FIFO buffer
						camera_test = 2;
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <main+0x2ac>)
 8000888:	2202      	movs	r2, #2
 800088a:	701a      	strb	r2, [r3, #0]
						start_flag = 2;
 800088c:	4b44      	ldr	r3, [pc, #272]	; (80009a0 <main+0x2b0>)
 800088e:	2202      	movs	r2, #2
 8000890:	701a      	strb	r2, [r3, #0]
						printf("ACK CMD CAM start video streaming.\r\n");
 8000892:	4845      	ldr	r0, [pc, #276]	; (80009a8 <main+0x2b8>)
 8000894:	f003 fa7e 	bl	8003d94 <puts>
						break;
 8000898:	e015      	b.n	80008c6 <main+0x1d6>
					case 0x21:                      //If 0x21 is received will stop_flag data transfer to FIFO buffer
						stop_flag = 1;
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <main+0x2bc>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
						printf("ACK CMD CAM stop_flag video streaming.\r\n");
 80008a0:	4843      	ldr	r0, [pc, #268]	; (80009b0 <main+0x2c0>)
 80008a2:	f003 fa77 	bl	8003d94 <puts>
						break;
 80008a6:	e00e      	b.n	80008c6 <main+0x1d6>
					case 0x30:                                //if0x30 is received video Mode will be on and also JPEG will be captured
						camera_test = 3;
 80008a8:	4b3c      	ldr	r3, [pc, #240]	; (800099c <main+0x2ac>)
 80008aa:	2203      	movs	r2, #3
 80008ac:	701a      	strb	r2, [r3, #0]
						start_flag = 3;
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <main+0x2b0>)
 80008b0:	2203      	movs	r2, #3
 80008b2:	701a      	strb	r2, [r3, #0]
						printf("ACK CMD CAM start single shoot.\r\n");
 80008b4:	483b      	ldr	r0, [pc, #236]	; (80009a4 <main+0x2b4>)
 80008b6:	f003 fa6d 	bl	8003d94 <puts>
						break;
 80008ba:	e004      	b.n	80008c6 <main+0x1d6>
					    default:
						break;
				}
			}
 80008bc:	bf00      	nop
 80008be:	e002      	b.n	80008c6 <main+0x1d6>
						break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <main+0x1d6>
						break;
 80008c4:	bf00      	nop
			if(camera_test == 1)
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <main+0x2ac>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d113      	bne.n	80008f6 <main+0x206>
			{
				if(start_flag == 1)
 80008ce:	4b34      	ldr	r3, [pc, #208]	; (80009a0 <main+0x2b0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d104      	bne.n	80008e0 <main+0x1f0>
				{
					start_flag = 0;
 80008d6:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <main+0x2b0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
					SingleCapTransfer();               //Image View will be done here
 80008dc:	f000 faba 	bl	8000e54 <SingleCapTransfer>
				}
				if(receive_OK)
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <main+0x2c4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f43f af40 	beq.w	800076a <main+0x7a>
				{
					receive_OK= 0;
 80008ea:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <main+0x2c4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
					SendbyUSART1();                //Send data to UART
 80008f0:	f000 fa52 	bl	8000d98 <SendbyUSART1>
 80008f4:	e739      	b.n	800076a <main+0x7a>
				}
			}
			else if(camera_test == 2)
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <main+0x2ac>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d128      	bne.n	8000950 <main+0x260>
			{
				if(start_flag == 2)
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <main+0x2b0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b02      	cmp	r3, #2
 8000904:	f47f af31 	bne.w	800076a <main+0x7a>
				{
					if(send_OK)
 8000908:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <main+0x2c8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d014      	beq.n	800093a <main+0x24a>
					{
						if(stop_flag)
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <main+0x2bc>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00b      	beq.n	8000930 <main+0x240>
						{
							printf("ACK CMD CAM stop_flag video streaming.\r\n");
 8000918:	4825      	ldr	r0, [pc, #148]	; (80009b0 <main+0x2c0>)
 800091a:	f003 fa3b 	bl	8003d94 <puts>
							stop_flag = 0;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <main+0x2bc>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
							camera_test = 0;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <main+0x2ac>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
							start_flag = 0;
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <main+0x2b0>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
						}
						    send_OK=false;
 8000930:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <main+0x2c8>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
						    SingleCapTransfer();         //Image View will be done here
 8000936:	f000 fa8d 	bl	8000e54 <SingleCapTransfer>
					}
					if(receive_OK)
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <main+0x2c4>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	f43f af13 	beq.w	800076a <main+0x7a>
					{
						    receive_OK= 0;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <main+0x2c4>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
						    SendbyUSART1();             //Send data to UART
 800094a:	f000 fa25 	bl	8000d98 <SendbyUSART1>
 800094e:	e70c      	b.n	800076a <main+0x7a>
					}
				}
			}
			else if(camera_test == 3)        //For capturing video mode
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <main+0x2ac>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	f47f af08 	bne.w	800076a <main+0x7a>
			{
				if(start_flag == 3)
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <main+0x2b0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b03      	cmp	r3, #3
 8000960:	f47f af03 	bne.w	800076a <main+0x7a>
				{
					 start_flag = 0;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <main+0x2b0>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
					 camera_test = 0;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <main+0x2ac>)
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
					 Start_JPEG_Capture();     //Video capture done here
 8000970:	f000 faa8 	bl	8000ec4 <Start_JPEG_Capture>
			if(NewCMD == 1)                  //If data is received from UART
 8000974:	e6f9      	b.n	800076a <main+0x7a>
 8000976:	bf00      	nop
 8000978:	20000091 	.word	0x20000091
 800097c:	20000248 	.word	0x20000248
 8000980:	20000249 	.word	0x20000249
 8000984:	080046bc 	.word	0x080046bc
 8000988:	20000090 	.word	0x20000090
 800098c:	080046e0 	.word	0x080046e0
 8000990:	20002269 	.word	0x20002269
 8000994:	20002268 	.word	0x20002268
 8000998:	080046fc 	.word	0x080046fc
 800099c:	2000024a 	.word	0x2000024a
 80009a0:	2000024b 	.word	0x2000024b
 80009a4:	08004720 	.word	0x08004720
 80009a8:	08004744 	.word	0x08004744
 80009ac:	2000024c 	.word	0x2000024c
 80009b0:	08004768 	.word	0x08004768
 80009b4:	20000254 	.word	0x20000254
 80009b8:	20000001 	.word	0x20000001

080009bc <SystemClock_Config>:
			}
		}
  }

void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f96c 	bl	8003ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fadf 	bl	8001fc8 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a10:	f000 f97a 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fd4c 	bl	80024cc <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a3a:	f000 f965 	bl	8000d08 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3740      	adds	r7, #64	; 0x40
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_SPI1_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;               //SPI is set to bidirecetional mode
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;                   //SPI data size of 8 bits
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;                 //SPI serial clock is set to LOW state
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;                     //For rising edge data is captured
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;                             //Slave Select bit is enabled though software
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;   //SPI Serial Clock is enabled for Transmit or Receive
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a7c:	2218      	movs	r2, #24
 8000a7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;                    //SPI First Bit is set to MSB
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;                    //SPI Transmission Interrupt is diabled
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;    //CRC Calicaulation is disabled
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;                             //CRC_Polynomial is set to 10
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a94:	220a      	movs	r2, #10
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_SPI1_Init+0x64>)
 8000a9a:	f001 feaf 	bl	80027fc <HAL_SPI_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aa4:	f000 f930 	bl	8000d08 <Error_Handler>
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000098 	.word	0x20000098
 8000ab0:	40013000 	.word	0x40013000

08000ab4 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};                  //Clocksource config is set to 0
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};                      //Master Config is set to 0
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;                                            //TIM1 is enabled
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <MX_TIM1_Init+0x9c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;                                         //Prescalar=0;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;                      //Up counter is enabled
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;                                        //Period is set to 65535
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;                //Timer Clock Division is set to 0
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;                                 //Repetition counter is disabled
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;    //Autoreload mode is disabled
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000afc:	4813      	ldr	r0, [pc, #76]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000afe:	f002 fc35 	bl	800336c <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b08:	f000 f8fe 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;             //Clock source is disabled
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000b1a:	f002 fc76 	bl	800340a <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b24:	f000 f8f0 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;                            //Timer Trigger Mode is reset
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;                   //Master Slave Mode is disabled
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_TIM1_Init+0x98>)
 8000b36:	f002 fe25 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b40:	f000 f8e2 	bl	8000d08 <Error_Handler>
  }
}
 8000b44:	bf00      	nop
 8000b46:	3718      	adds	r7, #24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000134 	.word	0x20000134
 8000b50:	40012c00 	.word	0x40012c00

08000b54 <MX_USART1_UART_Init>:
 * Return NULL
 * Description Used for USART1 Initialisation
 */

static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART1_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;                    //Baudrate Initiated
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;      //Word Length 8 bits
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;           //StopBits 1 is set
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;            //Parity Bits set to none
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;               //Transmission and receive mode is enabled
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;      //Hardware control none
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;  //Oversampling is set to 16
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f002 fe58 	bl	8003840 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f8b7 	bl	8000d08 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000017c 	.word	0x2000017c
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <MX_USART2_UART_Init>:
 * Return NULL
 * Description Used for USART1 Initialisation
 */

static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;                    //Baudrate Initiated
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;      //Word Length 8 bits
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;           //StopBits 1 is set
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;            //Parity Bits set to none
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;               //Transmission and receive mode is enabled
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;      //Hardware control none
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;  //Oversampling is set to 16
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f002 fe2e 	bl	8003840 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f88d 	bl	8000d08 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001c0 	.word	0x200001c0
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_DMA_Init>:
 * Return NULL
 * Description Used for DMA Intialisation
 */

static void MX_DMA_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_DMA_Init+0x48>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <MX_DMA_Init+0x48>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_DMA_Init+0x48>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200c      	movs	r0, #12
 8000c20:	f000 fe43 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c24:	200c      	movs	r0, #12
 8000c26:	f000 fe5c 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2011      	movs	r0, #17
 8000c30:	f000 fe3b 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c34:	2011      	movs	r0, #17
 8000c36:	f000 fe54 	bl	80018e2 <HAL_NVIC_EnableIRQ>

}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000

08000c48 <MX_GPIO_Init>:
 * Return NULL
 * Param NULL
 * Description Used for GPIO Initialisation
 */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1a      	ldr	r2, [pc, #104]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_GPIO_Init+0xb4>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_GPIO_Init+0xb8>)
 8000caa:	f001 f975 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, I2C_SDA_Pin|I2C_SCL_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_GPIO_Init+0xbc>)
 8000cb6:	f001 f96f 	bl	8001f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;             //Output Mode is enabled
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;                     //No Push Pull mode is enabled
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;           //Low Frequency Mode is enabled
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <MX_GPIO_Init+0xb8>)
 8000cd2:	f000 ffdd 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_SDA_Pin I2C_SCL_Pin */
  GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000cd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;                //Output Mode is enabled
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;                        //No Push Pull Mode enabled
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;               //Low Frequency Mode is enabled
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_GPIO_Init+0xbc>)
 8000cf0:	f000 ffce 	bl	8001c90 <HAL_GPIO_Init>

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40010c00 	.word	0x40010c00

08000d08 <Error_Handler>:


void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <SPI1_ReadWriteByte>:
 * Param  TxData
 * Return TxData
 * Description Used for Transmitting and receiving SPI data
 */
uint8_t SPI1_ReadWriteByte(uint8_t TxData)
{		
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)  //Until SPI Ready State data is not Tranmsitted
 8000d1e:	e006      	b.n	8000d2e <SPI1_ReadWriteByte+0x1a>
	HAL_SPI_Transmit(&hspi1, &TxData, 1, 1000);    //SPI Tranmission is done
 8000d20:	1df9      	adds	r1, r7, #7
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	2201      	movs	r2, #1
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <SPI1_ReadWriteByte+0x4c>)
 8000d2a:	f001 fdeb 	bl	8002904 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)  //Until SPI Ready State data is not Tranmsitted
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <SPI1_ReadWriteByte+0x4c>)
 8000d30:	f002 fa16 	bl	8003160 <HAL_SPI_GetState>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d1f2      	bne.n	8000d20 <SPI1_ReadWriteByte+0xc>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)//Until SPI Ready State data is not Received
 8000d3a:	e006      	b.n	8000d4a <SPI1_ReadWriteByte+0x36>
	HAL_SPI_Receive(&hspi1, &TxData, 1, 1000);     //SPI Receive is done
 8000d3c:	1df9      	adds	r1, r7, #7
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	2201      	movs	r2, #1
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <SPI1_ReadWriteByte+0x4c>)
 8000d46:	f001 ff19 	bl	8002b7c <HAL_SPI_Receive>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY)//Until SPI Ready State data is not Received
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <SPI1_ReadWriteByte+0x4c>)
 8000d4c:	f002 fa08 	bl	8003160 <HAL_SPI_GetState>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d1f2      	bne.n	8000d3c <SPI1_ReadWriteByte+0x28>
	return TxData;
 8000d56:	79fb      	ldrb	r3, [r7, #7]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000098 	.word	0x20000098

08000d64 <DMA1_RX>:
 * Param  data and length
 * Return NULL
 * Description Used for SPI data through DMA
 */
void DMA1_RX(uint8_t *p , uint32_t len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	 CS_LOW();                          //Chip Select made low
 8000d6e:	f7ff fa33 	bl	80001d8 <CS_LOW>
	 set_fifo_burst();                  //Fifo burst enabled
 8000d72:	f7ff faac 	bl	80002ce <set_fifo_burst>
	 DMA1_Channel2->CMAR = (uint32_t)p; //SPI DMA data register
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <DMA1_RX+0x2c>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60d3      	str	r3, [r2, #12]
	 DMA1_Channel2->CNDTR = len;      //SPI DMA Datasize register
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <DMA1_RX+0x2c>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6053      	str	r3, [r2, #4]
	 HAL_DMA_Init(&hdma_spi1_rx);      //DMA initialisation is done
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <DMA1_RX+0x30>)
 8000d84:	f000 fdc8 	bl	8001918 <HAL_DMA_Init>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	4002001c 	.word	0x4002001c
 8000d94:	200000f0 	.word	0x200000f0

08000d98 <SendbyUSART1>:
 * Return NULL
 * Description Used for Sending by DMA data to UART
 */

void SendbyUSART1(void)
{	
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	uint8_t	*sdbuf;
	haveRev += sendlen;
 8000d9e:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <SendbyUSART1+0x9c>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SendbyUSART1+0xa0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <SendbyUSART1+0x9c>)
 8000daa:	6013      	str	r3, [r2, #0]
    if(haveRev < length)
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <SendbyUSART1+0x9c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SendbyUSART1+0xa4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d22e      	bcs.n	8000e16 <SendbyUSART1+0x7e>
	{	
		if(picbuf == Buf1)                    //Check if picture buffer size is equal to buffer length or not
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <SendbyUSART1+0xa8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <SendbyUSART1+0xac>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d105      	bne.n	8000dce <SendbyUSART1+0x36>
		{		
			sdbuf = Buf1;	  picbuf = Buf2;	
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <SendbyUSART1+0xac>)
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <SendbyUSART1+0xa8>)
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <SendbyUSART1+0xb0>)
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e004      	b.n	8000dd8 <SendbyUSART1+0x40>
		}
		else
		{
			sdbuf = Buf2;	  picbuf = Buf1;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <SendbyUSART1+0xb0>)
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <SendbyUSART1+0xa8>)
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <SendbyUSART1+0xac>)
 8000dd6:	601a      	str	r2, [r3, #0]
		}
		UART1_DataTransmission(sendlen,sdbuf);          //Send data to UART
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <SendbyUSART1+0xa0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fbba 	bl	8001558 <UART1_DataTransmission>
		noRev	= length - haveRev;		
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <SendbyUSART1+0xa4>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <SendbyUSART1+0x9c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <SendbyUSART1+0xb4>)
 8000df0:	6013      	str	r3, [r2, #0]
		sendlen	= (noRev>=BUFFER_MAX_SIZE) ? BUFFER_MAX_SIZE : noRev;	
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <SendbyUSART1+0xb4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dfa:	bf28      	it	cs
 8000dfc:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <SendbyUSART1+0xa0>)
 8000e02:	6013      	str	r3, [r2, #0]
		DMA1_RX(picbuf, sendlen);	                 //Send data to SPI DMA
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <SendbyUSART1+0xa8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <SendbyUSART1+0xa0>)
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffa8 	bl	8000d64 <DMA1_RX>
	else
	{
		UART1_DataTransmission(sendlen, picbuf);           //Send data to UART
		send_OK = 1;                                        //Send_Ok flag is enabled
	}			 	 					 	 	
}
 8000e14:	e00a      	b.n	8000e2c <SendbyUSART1+0x94>
		UART1_DataTransmission(sendlen, picbuf);           //Send data to UART
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SendbyUSART1+0xa0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <SendbyUSART1+0xa8>)
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fb99 	bl	8001558 <UART1_DataTransmission>
		send_OK = 1;                                        //Send_Ok flag is enabled
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SendbyUSART1+0xb8>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	2000025c 	.word	0x2000025c
 8000e38:	20000258 	.word	0x20000258
 8000e3c:	20000094 	.word	0x20000094
 8000e40:	20000250 	.word	0x20000250
 8000e44:	20000264 	.word	0x20000264
 8000e48:	20001264 	.word	0x20001264
 8000e4c:	20000260 	.word	0x20000260
 8000e50:	20000001 	.word	0x20000001

08000e54 <SingleCapTransfer>:
 * Return NULL
 * Description Used for image capturing
 */

void SingleCapTransfer(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	flush_fifo();                                                    //fifo reset to zero
 8000e58:	f7ff fa40 	bl	80002dc <flush_fifo>
	clear_fifo_flag();                                              //clear captured fifo flag
 8000e5c:	f7ff fa4e 	bl	80002fc <clear_fifo_flag>
	start_capture();                                                //Initialise capture command
 8000e60:	f7ff fa44 	bl	80002ec <start_capture>
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)){;}               //Used for setting trigger bit for Arducam
 8000e64:	bf00      	nop
 8000e66:	2108      	movs	r1, #8
 8000e68:	2041      	movs	r0, #65	; 0x41
 8000e6a:	f7ff fa74 	bl	8000356 <get_bit>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f8      	beq.n	8000e66 <SingleCapTransfer+0x12>
	length= read_fifo_length();
 8000e74:	f7ff fa4a 	bl	800030c <read_fifo_length>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <SingleCapTransfer+0x5c>)
 8000e7c:	6013      	str	r3, [r2, #0]
	sendlen = (length>=BUFFER_MAX_SIZE) ? BUFFER_MAX_SIZE : length;  //Used for checking buffer size with length
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <SingleCapTransfer+0x5c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e86:	bf28      	it	cs
 8000e88:	f44f 5380 	movcs.w	r3, #4096	; 0x1000
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <SingleCapTransfer+0x60>)
 8000e8e:	6013      	str	r3, [r2, #0]
	picbuf = Buf1;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <SingleCapTransfer+0x64>)
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SingleCapTransfer+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
	haveRev = 0;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <SingleCapTransfer+0x6c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
	DMA1_RX(picbuf, sendlen);                                       //Send data through SPI DMA
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SingleCapTransfer+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <SingleCapTransfer+0x60>)
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff5c 	bl	8000d64 <DMA1_RX>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000094 	.word	0x20000094
 8000eb4:	20000258 	.word	0x20000258
 8000eb8:	20000250 	.word	0x20000250
 8000ebc:	20000264 	.word	0x20000264
 8000ec0:	2000025c 	.word	0x2000025c

08000ec4 <Start_JPEG_Capture>:
 * Return NULL
 * Description Used for JPEG capture
 */

void Start_JPEG_Capture(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t *p1;
	uint8_t a=0xcc;
 8000eca:	23cc      	movs	r3, #204	; 0xcc
 8000ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t *p2;
	uint8_t b=0xbb;
 8000ece:	23bb      	movs	r3, #187	; 0xbb
 8000ed0:	71bb      	strb	r3, [r7, #6]
	uint8_t *p3;
	uint8_t c=0xaa;
 8000ed2:	23aa      	movs	r3, #170	; 0xaa
 8000ed4:	717b      	strb	r3, [r7, #5]
	uint8_t *p4;
	uint8_t d=0xff;
 8000ed6:	23ff      	movs	r3, #255	; 0xff
 8000ed8:	713b      	strb	r3, [r7, #4]
	flush_fifo();                                                 //Used for reset the fifo pointer to zero
 8000eda:	f7ff f9ff 	bl	80002dc <flush_fifo>
	clear_fifo_flag();                                            //used for clearing capture flag
 8000ede:	f7ff fa0d 	bl	80002fc <clear_fifo_flag>
	start_capture();                                              //Used for initialisation of capture commands
 8000ee2:	f7ff fa03 	bl	80002ec <start_capture>
	while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK)){;}            //Used for setting trigger bit for Arducam
 8000ee6:	bf00      	nop
 8000ee8:	2108      	movs	r1, #8
 8000eea:	2041      	movs	r0, #65	; 0x41
 8000eec:	f7ff fa33 	bl	8000356 <get_bit>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f8      	beq.n	8000ee8 <Start_JPEG_Capture+0x24>
	length= read_fifo_length();                                 //Read current capture length
 8000ef6:	f7ff fa09 	bl	800030c <read_fifo_length>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a4a      	ldr	r2, [pc, #296]	; (8001028 <Start_JPEG_Capture+0x164>)
 8000efe:	6013      	str	r3, [r2, #0]
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET)    //Checks till Tranmsit flag will go to reset condition
 8000f00:	e001      	b.n	8000f06 <Start_JPEG_Capture+0x42>
		p3=&c;
 8000f02:	1d7b      	adds	r3, r7, #5
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET)    //Checks till Tranmsit flag will go to reset condition
 8000f06:	4b49      	ldr	r3, [pc, #292]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f10:	2b80      	cmp	r3, #128	; 0x80
 8000f12:	d1f6      	bne.n	8000f02 <Start_JPEG_Capture+0x3e>
	HAL_UART_Transmit(&huart1, p3,16,100);                          //Data Transmission done via UART
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	2210      	movs	r2, #16
 8000f18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f1a:	4844      	ldr	r0, [pc, #272]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f1c:	f002 fcdd 	bl	80038da <HAL_UART_Transmit>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET)    //Checks till Tranmsit flag will go to reset condition
 8000f20:	e001      	b.n	8000f26 <Start_JPEG_Capture+0x62>
		p4=&d;
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	623b      	str	r3, [r7, #32]
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET)    //Checks till Tranmsit flag will go to reset condition
 8000f26:	4b41      	ldr	r3, [pc, #260]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f30:	2b80      	cmp	r3, #128	; 0x80
 8000f32:	d1f6      	bne.n	8000f22 <Start_JPEG_Capture+0x5e>
	HAL_UART_Transmit(&huart1, p4,16,100);                         //Data Transmission done via UART
 8000f34:	2364      	movs	r3, #100	; 0x64
 8000f36:	2210      	movs	r2, #16
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	483c      	ldr	r0, [pc, #240]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f3c:	f002 fccd 	bl	80038da <HAL_UART_Transmit>
	CS_LOW();                                                      //Chip Select Made Low
 8000f40:	f7ff f94a 	bl	80001d8 <CS_LOW>
	set_fifo_burst();                                              //fifo burst mode is enabled
 8000f44:	f7ff f9c3 	bl	80002ce <set_fifo_burst>
	uint8_t VH, VL;
	int i = 0, j = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < 240; i++)                                         //For 320*240 Pixel Range
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	e03c      	b.n	8000fd0 <Start_JPEG_Capture+0x10c>
	{
		for (j = 0; j < 320; j++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	e032      	b.n	8000fc2 <Start_JPEG_Capture+0xfe>
		{
			VH = SPI1_ReadWriteByte(0x00);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fed9 	bl	8000d14 <SPI1_ReadWriteByte>
 8000f62:	4603      	mov	r3, r0
 8000f64:	70fb      	strb	r3, [r7, #3]
			VL = SPI1_ReadWriteByte(0x00);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff fed4 	bl	8000d14 <SPI1_ReadWriteByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	70bb      	strb	r3, [r7, #2]
			while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET);  //Checks till Tranmsit flag will go to reset condition
 8000f70:	bf00      	nop
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7c:	2b80      	cmp	r3, #128	; 0x80
 8000f7e:	d1f8      	bne.n	8000f72 <Start_JPEG_Capture+0xae>
			uint8_t *vidbuf= &VL;
 8000f80:	1cbb      	adds	r3, r7, #2
 8000f82:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit(&huart1, vidbuf,16,100);                  //Data Transmission done via UART
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	2210      	movs	r2, #16
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	4828      	ldr	r0, [pc, #160]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f8c:	f002 fca5 	bl	80038da <HAL_UART_Transmit>
			delay_us(15);                                               //15 microseconds delay
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff fb95 	bl	80006c0 <delay_us>
			while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET);  //Checks till Tranmsit flag will go to reset condition
 8000f96:	bf00      	nop
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <Start_JPEG_Capture+0x168>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa2:	2b80      	cmp	r3, #128	; 0x80
 8000fa4:	d1f8      	bne.n	8000f98 <Start_JPEG_Capture+0xd4>
			uint8_t *vidbuf1= &VH;
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	60bb      	str	r3, [r7, #8]
			HAL_UART_Transmit(&huart1,vidbuf1,16,100);                  //Data Transmission done via UART
 8000faa:	2364      	movs	r3, #100	; 0x64
 8000fac:	2210      	movs	r2, #16
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	481e      	ldr	r0, [pc, #120]	; (800102c <Start_JPEG_Capture+0x168>)
 8000fb2:	f002 fc92 	bl	80038da <HAL_UART_Transmit>
			delay_us(15);                                                 //15 microseconds delay
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff fb82 	bl	80006c0 <delay_us>
		for (j = 0; j < 320; j++)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000fc8:	dbc8      	blt.n	8000f5c <Start_JPEG_Capture+0x98>
	for (i = 0; i < 240; i++)                                         //For 320*240 Pixel Range
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2bef      	cmp	r3, #239	; 0xef
 8000fd4:	ddbf      	ble.n	8000f56 <Start_JPEG_Capture+0x92>
		}
	}
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET);     //Checks till Tranmsit flag will go to reset condition
 8000fd6:	bf00      	nop
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <Start_JPEG_Capture+0x168>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	2b80      	cmp	r3, #128	; 0x80
 8000fe4:	d1f8      	bne.n	8000fd8 <Start_JPEG_Capture+0x114>
    p2=&b;
 8000fe6:	1dbb      	adds	r3, r7, #6
 8000fe8:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart1, p2,16,100);                         //Data Transmission done via UART
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	2210      	movs	r2, #16
 8000fee:	6979      	ldr	r1, [r7, #20]
 8000ff0:	480e      	ldr	r0, [pc, #56]	; (800102c <Start_JPEG_Capture+0x168>)
 8000ff2:	f002 fc72 	bl	80038da <HAL_UART_Transmit>
	delay_us(12);                                                  //12 microseconds delay
 8000ff6:	200c      	movs	r0, #12
 8000ff8:	f7ff fb62 	bl	80006c0 <delay_us>
	while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)==RESET);      //Checks till Tranmsit flag will go to reset condition
 8000ffc:	bf00      	nop
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <Start_JPEG_Capture+0x168>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	2b80      	cmp	r3, #128	; 0x80
 800100a:	d1f8      	bne.n	8000ffe <Start_JPEG_Capture+0x13a>
	p1= &a;
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart1, p1,16,100);                           //Data Transmission done via UART
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2210      	movs	r2, #16
 8001014:	6939      	ldr	r1, [r7, #16]
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <Start_JPEG_Capture+0x168>)
 8001018:	f002 fc5f 	bl	80038da <HAL_UART_Transmit>
	CS_HIGH();                                                       //Chip Select High
 800101c:	f7ff f8d0 	bl	80001c0 <CS_HIGH>
}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000094 	.word	0x20000094
 800102c:	2000017c 	.word	0x2000017c

08001030 <DMA1_Channel2_IRQHandler>:
 *Return NULL
 *Param NULL
 *Description Used for clear interrupt flag of SPI DMA
 */
void DMA1_Channel2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if(DMA_GetITStatus(DMA_FLAG_TC2))
 8001034:	2020      	movs	r0, #32
 8001036:	f000 fe09 	bl	8001c4c <DMA_GetITStatus>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <DMA1_Channel2_IRQHandler+0x36>
	{
		__HAL_DMA_CLEAR_FLAG(DMA1,DMA_FLAG_TC2);  //Used for clearing flag
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <DMA1_Channel2_IRQHandler+0x3c>)
 8001042:	2220      	movs	r2, #32
 8001044:	605a      	str	r2, [r3, #4]
		 __HAL_DMA_DISABLE(&hdma_spi1_rx) ;       //SPI DMA Disable
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <DMA1_Channel2_IRQHandler+0x40>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <DMA1_Channel2_IRQHandler+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 0201 	bic.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
		 HAL_SPI_DMAStop(&hspi1);                 //SPI DMA data transmission is stopped
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <DMA1_Channel2_IRQHandler+0x44>)
 8001058:	f002 f843 	bl	80030e2 <HAL_SPI_DMAStop>
		CS_HIGH();                                //Chip Select is High
 800105c:	f7ff f8b0 	bl	80001c0 <CS_HIGH>
		receive_OK=1;                             //Enable Receive Ok flag
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <DMA1_Channel2_IRQHandler+0x48>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	}
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40020000 	.word	0x40020000
 8001070:	200000f0 	.word	0x200000f0
 8001074:	20000098 	.word	0x20000098
 8001078:	20000254 	.word	0x20000254

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_MspInit+0x40>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_MspInit+0x40>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_MspInit+0x40>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_MspInit+0x40>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_MspInit+0x40>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_MspInit+0x40>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2e      	ldr	r2, [pc, #184]	; (8001194 <HAL_SPI_MspInit+0xd4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d155      	bne.n	800118c <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_SPI_MspInit+0xd8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <HAL_SPI_MspInit+0xd8>)
 80010e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_SPI_MspInit+0xd8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_SPI_MspInit+0xd8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_SPI_MspInit+0xd8>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_SPI_MspInit+0xd8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4619      	mov	r1, r3
 8001122:	481e      	ldr	r0, [pc, #120]	; (800119c <HAL_SPI_MspInit+0xdc>)
 8001124:	f000 fdb4 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4818      	ldr	r0, [pc, #96]	; (800119c <HAL_SPI_MspInit+0xdc>)
 800113c:	f000 fda8 	bl	8001c90 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_SPI_MspInit+0xe4>)
 8001144:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001172:	f000 fbd1 	bl	8001918 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 800117c:	f7ff fdc4 	bl	8000d08 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001184:	64da      	str	r2, [r3, #76]	; 0x4c
 8001186:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_SPI_MspInit+0xe0>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40013000 	.word	0x40013000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800
 80011a0:	200000f0 	.word	0x200000f0
 80011a4:	4002001c 	.word	0x4002001c

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_TIM_Base_MspInit+0x34>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d10b      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_TIM_Base_MspInit+0x38>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_TIM_Base_MspInit+0x38>)
 80011c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_TIM_Base_MspInit+0x38>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_UART_MspInit+0x154>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d13a      	bne.n	800127a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_UART_MspInit+0x158>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_UART_MspInit+0x158>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_UART_MspInit+0x158>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_UART_MspInit+0x158>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a46      	ldr	r2, [pc, #280]	; (800133c <HAL_UART_MspInit+0x158>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_UART_MspInit+0x158>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4619      	mov	r1, r3
 8001248:	483d      	ldr	r0, [pc, #244]	; (8001340 <HAL_UART_MspInit+0x15c>)
 800124a:	f000 fd21 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4619      	mov	r1, r3
 8001262:	4837      	ldr	r0, [pc, #220]	; (8001340 <HAL_UART_MspInit+0x15c>)
 8001264:	f000 fd14 	bl	8001c90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2025      	movs	r0, #37	; 0x25
 800126e:	f000 fb1c 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001272:	2025      	movs	r0, #37	; 0x25
 8001274:	f000 fb35 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001278:	e05a      	b.n	8001330 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_UART_MspInit+0x160>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d155      	bne.n	8001330 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_UART_MspInit+0x158>)
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	4a2c      	ldr	r2, [pc, #176]	; (800133c <HAL_UART_MspInit+0x158>)
 800128a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128e:	61d3      	str	r3, [r2, #28]
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <HAL_UART_MspInit+0x158>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_UART_MspInit+0x158>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_UART_MspInit+0x158>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_UART_MspInit+0x158>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012b4:	2304      	movs	r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4619      	mov	r1, r3
 80012c6:	481e      	ldr	r0, [pc, #120]	; (8001340 <HAL_UART_MspInit+0x15c>)
 80012c8:	f000 fce2 	bl	8001c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012cc:	2308      	movs	r3, #8
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0318 	add.w	r3, r7, #24
 80012dc:	4619      	mov	r1, r3
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <HAL_UART_MspInit+0x15c>)
 80012e0:	f000 fcd6 	bl	8001c90 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_UART_MspInit+0x164>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_UART_MspInit+0x168>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_UART_MspInit+0x164>)
 80012ec:	2210      	movs	r2, #16
 80012ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_UART_MspInit+0x164>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_UART_MspInit+0x164>)
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_UART_MspInit+0x164>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_UART_MspInit+0x164>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_UART_MspInit+0x164>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_UART_MspInit+0x164>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <HAL_UART_MspInit+0x164>)
 8001316:	f000 faff 	bl	8001918 <HAL_DMA_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_UART_MspInit+0x140>
      Error_Handler();
 8001320:	f7ff fcf2 	bl	8000d08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_UART_MspInit+0x164>)
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_UART_MspInit+0x164>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013800 	.word	0x40013800
 800133c:	40021000 	.word	0x40021000
 8001340:	40010800 	.word	0x40010800
 8001344:	40004400 	.word	0x40004400
 8001348:	20000204 	.word	0x20000204
 800134c:	40020080 	.word	0x40020080

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f995 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
//
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <DMA1_Channel7_IRQHandler+0x10>)
 80013a6:	f000 fb4b 	bl	8001a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
//
  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000204 	.word	0x20000204

080013b4 <_read>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	e00a      	b.n	80013dc <_read+0x28>
 80013c6:	f3af 8000 	nop.w
 80013ca:	4601      	mov	r1, r0
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	b2ca      	uxtb	r2, r1
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf0      	blt.n	80013c6 <_read+0x12>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_write>:
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e009      	b.n	8001414 <_write+0x26>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f3af 8000 	nop.w
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf1      	blt.n	8001400 <_write+0x12>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_close>:
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <_fstat>:
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	2300      	movs	r3, #0
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <_isatty>:
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	2301      	movs	r3, #1
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <_lseek>:
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	2300      	movs	r3, #0
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
	...

08001488 <_sbrk>:
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
 80014b8:	f002 fbcc 	bl	8003c54 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20005000 	.word	0x20005000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20002264 	.word	0x20002264
 80014f0:	20002280 	.word	0x20002280

080014f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <USART_ClearITPendingBit>:
 * Return NULL
 * Description Used for clearing pending data from interrupt
 */

void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800150c:	2300      	movs	r3, #0
 800150e:	81fb      	strh	r3, [r7, #14]
 8001510:	2300      	movs	r3, #0
 8001512:	81bb      	strh	r3, [r7, #12]
  bitpos = USART_IT >> 0x08;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	2201      	movs	r2, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;                      //Used for clearing Interrupt Flag
 8001524:	89bb      	ldrh	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <USART_ReceiveData>:
 * Description Used for storing data of UART
 */


uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);             //Data stored in DR register
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	b29b      	uxth	r3, r3
 8001548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154c:	b29b      	uxth	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <UART1_DataTransmission>:
 * Param len-length of fifo
 * Return data
 * Description Used for receiving USART data
 */
void UART1_DataTransmission(uint32_t len, uint8_t *p)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	uint8_t *a=p;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	60fb      	str	r3, [r7, #12]
	uint32_t data_count =0;
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
    while(data_count<=len)
 800156a:	e013      	b.n	8001594 <UART1_DataTransmission+0x3c>
	{
		while(((huart1.Instance)->SR & (UART_FLAG_TXE))==RESET);            //Used for checking Transmit Flag is received or not
 800156c:	bf00      	nop
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <UART1_DataTransmission+0x50>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f8      	beq.n	800156e <UART1_DataTransmission+0x16>
		HAL_UART_Transmit(&huart1,a,16,100);                                //Data Transmitted Via UART
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	2210      	movs	r2, #16
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <UART1_DataTransmission+0x50>)
 8001584:	f002 f9a9 	bl	80038da <HAL_UART_Transmit>
		a++;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
		data_count++;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
    while(data_count<=len)
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d9e7      	bls.n	800156c <UART1_DataTransmission+0x14>
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000017c 	.word	0x2000017c

080015ac <USART1_IRQHandler>:
 * Return NULL
 * Description Used for Handling USART Interrupt
 */

void USART1_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART1, UART_IT_RXNE) != RESET)   //Check whether Interrupt occured or not
 80015b0:	2120      	movs	r1, #32
 80015b2:	480b      	ldr	r0, [pc, #44]	; (80015e0 <USART1_IRQHandler+0x34>)
 80015b4:	f002 fafc 	bl	8003bb0 <USART_GetITStatus>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00d      	beq.n	80015da <USART1_IRQHandler+0x2e>
	{
		USART_ClearITPendingBit(USART1, UART_IT_RXNE);    //Check whether Pending Interrupt Bit is cleared or not
 80015be:	2120      	movs	r1, #32
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <USART1_IRQHandler+0x34>)
 80015c2:	f7ff ff9d 	bl	8001500 <USART_ClearITPendingBit>
		USART1_ReceiveData = USART_ReceiveData(USART1);   //Data received from SPI DMA passed to UART
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <USART1_IRQHandler+0x34>)
 80015c8:	f7ff ffb7 	bl	800153a <USART_ReceiveData>
 80015cc:	4603      	mov	r3, r0
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <USART1_IRQHandler+0x38>)
 80015d2:	701a      	strb	r2, [r3, #0]
		NewCMD = 1;                                       //Flag set if data is received
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <USART1_IRQHandler+0x3c>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
	}
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40013800 	.word	0x40013800
 80015e4:	20002268 	.word	0x20002268
 80015e8:	20002269 	.word	0x20002269

080015ec <Reset_Handler>:
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopFillZerobss+0x12>)
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopFillZerobss+0x16>)
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopFillZerobss+0x1a>)
 80015f2:	2300      	movs	r3, #0
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:
 80015f6:	58d4      	ldr	r4, [r2, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:
 80015fc:	18c4      	adds	r4, r0, r3
 80015fe:	428c      	cmp	r4, r1
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopFillZerobss+0x1e>)
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopFillZerobss+0x22>)
 8001606:	2300      	movs	r3, #0
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:
 800160e:	42a2      	cmp	r2, r4
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>
 8001612:	f7ff ff6f 	bl	80014f4 <SystemInit>
 8001616:	f002 fb23 	bl	8003c60 <__libc_init_array>
 800161a:	f7ff f869 	bl	80006f0 <main>
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000
 8001624:	20000074 	.word	0x20000074
 8001628:	08004f20 	.word	0x08004f20
 800162c:	20000074 	.word	0x20000074
 8001630:	20002280 	.word	0x20002280

08001634 <ADC1_2_IRQHandler>:
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f923 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fd12 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f93b 	bl	80018fe <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f903 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000004 	.word	0x20000004
 80016bc:	2000000c 	.word	0x2000000c
 80016c0:	20000008 	.word	0x20000008

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x1c>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_IncTick+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_IncTick+0x20>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	2000226c 	.word	0x2000226c

080016e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_GetTick+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	2000226c 	.word	0x2000226c

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	2b00      	cmp	r3, #0
 8001770:	db0b      	blt.n	800178a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	f003 021f 	and.w	r2, r3, #31
 8001778:	4906      	ldr	r1, [pc, #24]	; (8001794 <__NVIC_EnableIRQ+0x34>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	2001      	movs	r0, #1
 8001782:	fa00 f202 	lsl.w	r2, r0, r2
 8001786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	; (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	; (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	; 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff90 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff2d 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff42 	bl	8001744 <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff90 	bl	80017ec <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5f 	bl	8001798 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff35 	bl	8001760 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e043      	b.n	80019b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_DMA_Init+0xa8>)
 8001936:	4413      	add	r3, r2
 8001938:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_DMA_Init+0xac>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	009a      	lsls	r2, r3, #2
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <HAL_DMA_Init+0xb0>)
 800194a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001962:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001966:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	bffdfff8 	.word	0xbffdfff8
 80019c4:	cccccccd 	.word	0xcccccccd
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d008      	beq.n	80019f4 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2204      	movs	r2, #4
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e020      	b.n	8001a36 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020e 	bic.w	r2, r2, #14
 8001a02:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d04f      	beq.n	8001b08 <HAL_DMA_IRQHandler+0xc8>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d04a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <HAL_DMA_IRQHandler+0x1f0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d029      	beq.n	8001aee <HAL_DMA_IRQHandler+0xae>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a65      	ldr	r2, [pc, #404]	; (8001c34 <HAL_DMA_IRQHandler+0x1f4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_IRQHandler+0xaa>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a63      	ldr	r2, [pc, #396]	; (8001c38 <HAL_DMA_IRQHandler+0x1f8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01a      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0xa4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a62      	ldr	r2, [pc, #392]	; (8001c3c <HAL_DMA_IRQHandler+0x1fc>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d012      	beq.n	8001ade <HAL_DMA_IRQHandler+0x9e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a60      	ldr	r2, [pc, #384]	; (8001c40 <HAL_DMA_IRQHandler+0x200>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00a      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x98>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5f      	ldr	r2, [pc, #380]	; (8001c44 <HAL_DMA_IRQHandler+0x204>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x92>
 8001acc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad0:	e00e      	b.n	8001af0 <HAL_DMA_IRQHandler+0xb0>
 8001ad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ad6:	e00b      	b.n	8001af0 <HAL_DMA_IRQHandler+0xb0>
 8001ad8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001adc:	e008      	b.n	8001af0 <HAL_DMA_IRQHandler+0xb0>
 8001ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae2:	e005      	b.n	8001af0 <HAL_DMA_IRQHandler+0xb0>
 8001ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae8:	e002      	b.n	8001af0 <HAL_DMA_IRQHandler+0xb0>
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	e000      	b.n	8001af0 <HAL_DMA_IRQHandler+0xb0>
 8001aee:	2304      	movs	r3, #4
 8001af0:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <HAL_DMA_IRQHandler+0x208>)
 8001af2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8094 	beq.w	8001c26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b06:	e08e      	b.n	8001c26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d056      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x186>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d051      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10b      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020a 	bic.w	r2, r2, #10
 8001b3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a38      	ldr	r2, [pc, #224]	; (8001c30 <HAL_DMA_IRQHandler+0x1f0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d029      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x166>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a37      	ldr	r2, [pc, #220]	; (8001c34 <HAL_DMA_IRQHandler+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x162>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <HAL_DMA_IRQHandler+0x1f8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01a      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x15c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <HAL_DMA_IRQHandler+0x1fc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d012      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x156>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a32      	ldr	r2, [pc, #200]	; (8001c40 <HAL_DMA_IRQHandler+0x200>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00a      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x150>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a31      	ldr	r2, [pc, #196]	; (8001c44 <HAL_DMA_IRQHandler+0x204>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d102      	bne.n	8001b8a <HAL_DMA_IRQHandler+0x14a>
 8001b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b88:	e00e      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x168>
 8001b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8e:	e00b      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x168>
 8001b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b94:	e008      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x168>
 8001b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9a:	e005      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x168>
 8001b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba0:	e002      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x168>
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	e000      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x168>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_DMA_IRQHandler+0x208>)
 8001baa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d034      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bc4:	e02f      	b.n	8001c26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2208      	movs	r2, #8
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d028      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x1e8>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d023      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
    }
  }
  return;
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
}
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020008 	.word	0x40020008
 8001c34:	4002001c 	.word	0x4002001c
 8001c38:	40020030 	.word	0x40020030
 8001c3c:	40020044 	.word	0x40020044
 8001c40:	40020058 	.word	0x40020058
 8001c44:	4002006c 	.word	0x4002006c
 8001c48:	40020000 	.word	0x40020000

08001c4c <DMA_GetITStatus>:
    hdma->Instance->CMAR = DstAddress;
  }
}

ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <DMA_GetITStatus+0x20>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA1->ISR;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <DMA_GetITStatus+0x40>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60bb      	str	r3, [r7, #8]
//    /* Get DMA1 ISR register value */
//    tmpreg = DMA1->ISR;
//  }

  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <DMA_GetITStatus+0x30>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e001      	b.n	8001c80 <DMA_GetITStatus+0x34>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMA_IT status */
  return bitstatus;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40020000 	.word	0x40020000

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b08b      	sub	sp, #44	; 0x2c
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e169      	b.n	8001f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8158 	bne.w	8001f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a9a      	ldr	r2, [pc, #616]	; (8001f30 <HAL_GPIO_Init+0x2a0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d05e      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a98      	ldr	r2, [pc, #608]	; (8001f30 <HAL_GPIO_Init+0x2a0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d875      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cd2:	4a98      	ldr	r2, [pc, #608]	; (8001f34 <HAL_GPIO_Init+0x2a4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d058      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cd8:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <HAL_GPIO_Init+0x2a4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d86f      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cde:	4a96      	ldr	r2, [pc, #600]	; (8001f38 <HAL_GPIO_Init+0x2a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d052      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001ce4:	4a94      	ldr	r2, [pc, #592]	; (8001f38 <HAL_GPIO_Init+0x2a8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d869      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cea:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <HAL_GPIO_Init+0x2ac>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d04c      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cf0:	4a92      	ldr	r2, [pc, #584]	; (8001f3c <HAL_GPIO_Init+0x2ac>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d863      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cf6:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_GPIO_Init+0x2b0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d046      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cfc:	4a90      	ldr	r2, [pc, #576]	; (8001f40 <HAL_GPIO_Init+0x2b0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d85d      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d82a      	bhi.n	8001d5c <HAL_GPIO_Init+0xcc>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d859      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_GPIO_Init+0x80>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d8b 	.word	0x08001d8b
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d77 	.word	0x08001d77
 8001d1c:	08001db9 	.word	0x08001db9
 8001d20:	08001dbf 	.word	0x08001dbf
 8001d24:	08001dbf 	.word	0x08001dbf
 8001d28:	08001dbf 	.word	0x08001dbf
 8001d2c:	08001dbf 	.word	0x08001dbf
 8001d30:	08001dbf 	.word	0x08001dbf
 8001d34:	08001dbf 	.word	0x08001dbf
 8001d38:	08001dbf 	.word	0x08001dbf
 8001d3c:	08001dbf 	.word	0x08001dbf
 8001d40:	08001dbf 	.word	0x08001dbf
 8001d44:	08001dbf 	.word	0x08001dbf
 8001d48:	08001dbf 	.word	0x08001dbf
 8001d4c:	08001dbf 	.word	0x08001dbf
 8001d50:	08001dbf 	.word	0x08001dbf
 8001d54:	08001d6d 	.word	0x08001d6d
 8001d58:	08001d81 	.word	0x08001d81
 8001d5c:	4a79      	ldr	r2, [pc, #484]	; (8001f44 <HAL_GPIO_Init+0x2b4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d62:	e02c      	b.n	8001dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e029      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	3304      	adds	r3, #4
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e024      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e01f      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e01a      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d92:	2304      	movs	r3, #4
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e013      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	611a      	str	r2, [r3, #16]
          break;
 8001daa:	e009      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dac:	2308      	movs	r3, #8
 8001dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	615a      	str	r2, [r3, #20]
          break;
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          break;
 8001dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d801      	bhi.n	8001dca <HAL_GPIO_Init+0x13a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_Init+0x13e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d802      	bhi.n	8001ddc <HAL_GPIO_Init+0x14c>
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0x152>
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	3b08      	subs	r3, #8
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	210f      	movs	r1, #15
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	6a39      	ldr	r1, [r7, #32]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80b1 	beq.w	8001f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_GPIO_Init+0x2bc>)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <HAL_GPIO_Init+0x2c0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3f      	ldr	r2, [pc, #252]	; (8001f54 <HAL_GPIO_Init+0x2c4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00d      	beq.n	8001e78 <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <HAL_GPIO_Init+0x2c8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0x1e4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3d      	ldr	r2, [pc, #244]	; (8001f5c <HAL_GPIO_Init+0x2cc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_GPIO_Init+0x1e0>
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8e:	492f      	ldr	r1, [pc, #188]	; (8001f4c <HAL_GPIO_Init+0x2bc>)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	492c      	ldr	r1, [pc, #176]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4928      	ldr	r1, [pc, #160]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	491e      	ldr	r1, [pc, #120]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4914      	ldr	r1, [pc, #80]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d021      	beq.n	8001f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
 8001f2c:	e021      	b.n	8001f72 <HAL_GPIO_Init+0x2e2>
 8001f2e:	bf00      	nop
 8001f30:	10320000 	.word	0x10320000
 8001f34:	10310000 	.word	0x10310000
 8001f38:	10220000 	.word	0x10220000
 8001f3c:	10210000 	.word	0x10210000
 8001f40:	10120000 	.word	0x10120000
 8001f44:	10110000 	.word	0x10110000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40010800 	.word	0x40010800
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40011400 	.word	0x40011400
 8001f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4909      	ldr	r1, [pc, #36]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f47f ae8e 	bne.w	8001ca4 <HAL_GPIO_Init+0x14>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	372c      	adds	r7, #44	; 0x2c
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa8:	787b      	ldrb	r3, [r7, #1]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fae:	887a      	ldrh	r2, [r7, #2]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fb4:	e003      	b.n	8001fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	041a      	lsls	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e272      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff4:	4b8f      	ldr	r3, [pc, #572]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
 8002000:	4b8c      	ldr	r3, [pc, #560]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x12c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e24c      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x76>
 8002030:	4b80      	ldr	r3, [pc, #512]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7f      	ldr	r2, [pc, #508]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002046:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b78      	ldr	r3, [pc, #480]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a77      	ldr	r2, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xbc>
 800206a:	4b72      	ldr	r3, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a71      	ldr	r2, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a67      	ldr	r2, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fb20 	bl	80016e8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fb1c 	bl	80016e8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e200      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe4>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fb0c 	bl	80016e8 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fb08 	bl	80016e8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1ec      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x10c>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1c0      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4939      	ldr	r1, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff fac1 	bl	80016e8 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fabd 	bl	80016e8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1a1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4927      	ldr	r1, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff faa0 	bl	80016e8 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff fa9c 	bl	80016e8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e180      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03a      	beq.n	800224c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d019      	beq.n	8002212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_RCC_OscConfig+0x274>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fa80 	bl	80016e8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fa7c 	bl	80016e8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e160      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 fad8 	bl	80027c0 <RCC_Delay>
 8002210:	e01c      	b.n	800224c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_OscConfig+0x274>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fa66 	bl	80016e8 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	e00f      	b.n	8002240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fa62 	bl	80016e8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d908      	bls.n	8002240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e146      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	42420000 	.word	0x42420000
 800223c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e9      	bne.n	8002220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a6 	beq.w	80023a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a87      	ldr	r2, [pc, #540]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b85      	ldr	r3, [pc, #532]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7ff fa23 	bl	80016e8 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7ff fa1f 	bl	80016e8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e103      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b75      	ldr	r3, [pc, #468]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x312>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x334>
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a66      	ldr	r2, [pc, #408]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x356>
 8002304:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a60      	ldr	r2, [pc, #384]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a5d      	ldr	r2, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 800231e:	4b5b      	ldr	r3, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff f9d3 	bl	80016e8 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff f9cf 	bl	80016e8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0b1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCC_OscConfig+0x37e>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff f9bd 	bl	80016e8 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff f9b9 	bl	80016e8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e09b      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a3b      	ldr	r2, [pc, #236]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d061      	beq.n	8002480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d146      	bne.n	8002452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff f98d 	bl	80016e8 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff f989 	bl	80016e8 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e06d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4921      	ldr	r1, [pc, #132]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	430b      	orrs	r3, r1
 800241e:	491b      	ldr	r1, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff f95d 	bl	80016e8 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff f959 	bl	80016e8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e03d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x46a>
 8002450:	e035      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f946 	bl	80016e8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff f942 	bl	80016e8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e026      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x498>
 800247e:	e01e      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e019      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x500>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4965      	ldr	r1, [pc, #404]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800254a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7ff f894 	bl	80016e8 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff f890 	bl	80016e8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1cc>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fff2 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08004e9c 	.word	0x08004e9c
 8002698:	20000004 	.word	0x20000004
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b490      	push	{r4, r7}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_RCC_GetSysClockFreq+0xac>)
 80026a8:	1d3c      	adds	r4, r7, #4
 80026aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026b0:	f240 2301 	movw	r3, #513	; 0x201
 80026b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x40>
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x46>
 80026de:	e02b      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e2:	623b      	str	r3, [r7, #32]
      break;
 80026e4:	e02b      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	0c9b      	lsrs	r3, r3, #18
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3328      	adds	r3, #40	; 0x28
 80026f0:	443b      	add	r3, r7
 80026f2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026f6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0c5b      	lsrs	r3, r3, #17
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	3328      	adds	r3, #40	; 0x28
 800270e:	443b      	add	r3, r7
 8002710:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002714:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb4>)
 800271a:	fb03 f202 	mul.w	r2, r3, r2
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	e004      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_RCC_GetSysClockFreq+0xb8>)
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	623b      	str	r3, [r7, #32]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb4>)
 800273a:	623b      	str	r3, [r7, #32]
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6a3b      	ldr	r3, [r7, #32]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bc90      	pop	{r4, r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	08004790 	.word	0x08004790
 8002750:	40021000 	.word	0x40021000
 8002754:	007a1200 	.word	0x007a1200
 8002758:	003d0900 	.word	0x003d0900

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <HAL_RCC_GetHCLKFreq+0x10>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	20000004 	.word	0x20000004

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff2 	bl	800275c <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	08004eac 	.word	0x08004eac

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffde 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0adb      	lsrs	r3, r3, #11
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08004eac 	.word	0x08004eac

080027c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <RCC_Delay+0x34>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <RCC_Delay+0x38>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0a5b      	lsrs	r3, r3, #9
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027dc:	bf00      	nop
  }
  while (Delay --);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	60fa      	str	r2, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <RCC_Delay+0x1c>
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000004 	.word	0x20000004
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e076      	b.n	80028fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800281e:	d009      	beq.n	8002834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
 8002826:	e005      	b.n	8002834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fc36 	bl	80010c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	0c1a      	lsrs	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 0204 	and.w	r2, r2, #4
 80028da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_SPI_Transmit+0x22>
 8002922:	2302      	movs	r3, #2
 8002924:	e126      	b.n	8002b74 <HAL_SPI_Transmit+0x270>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800292e:	f7fe fedb 	bl	80016e8 <HAL_GetTick>
 8002932:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d002      	beq.n	800294a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002948:	e10b      	b.n	8002b62 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_SPI_Transmit+0x52>
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	77fb      	strb	r3, [r7, #31]
    goto error;
 800295a:	e102      	b.n	8002b62 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2203      	movs	r2, #3
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	88fa      	ldrh	r2, [r7, #6]
 8002974:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a2:	d10f      	bne.n	80029c4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d007      	beq.n	80029e2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ea:	d14b      	bne.n	8002a84 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_Transmit+0xf6>
 80029f4:	8afb      	ldrh	r3, [r7, #22]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d13e      	bne.n	8002a78 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	1c9a      	adds	r2, r3, #2
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a1e:	e02b      	b.n	8002a78 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d112      	bne.n	8002a54 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	1c9a      	adds	r2, r3, #2
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a52:	e011      	b.n	8002a78 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a54:	f7fe fe48 	bl	80016e8 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d803      	bhi.n	8002a6c <HAL_SPI_Transmit+0x168>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d102      	bne.n	8002a72 <HAL_SPI_Transmit+0x16e>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a76:	e074      	b.n	8002b62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ce      	bne.n	8002a20 <HAL_SPI_Transmit+0x11c>
 8002a82:	e04c      	b.n	8002b1e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_SPI_Transmit+0x18e>
 8002a8c:	8afb      	ldrh	r3, [r7, #22]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d140      	bne.n	8002b14 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	330c      	adds	r3, #12
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ab8:	e02c      	b.n	8002b14 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d113      	bne.n	8002af0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	7812      	ldrb	r2, [r2, #0]
 8002ad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	86da      	strh	r2, [r3, #54]	; 0x36
 8002aee:	e011      	b.n	8002b14 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af0:	f7fe fdfa 	bl	80016e8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d803      	bhi.n	8002b08 <HAL_SPI_Transmit+0x204>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_Transmit+0x20a>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b12:	e026      	b.n	8002b62 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1cd      	bne.n	8002aba <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fc04 	bl	8003330 <SPI_EndRxTxTransaction>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e000      	b.n	8002b62 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002b60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b72:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3720      	adds	r7, #32
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b98:	d112      	bne.n	8002bc0 <HAL_SPI_Receive+0x44>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f8f1 	bl	8002d9e <HAL_SPI_TransmitReceive>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	e0ea      	b.n	8002d96 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_SPI_Receive+0x52>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e0e3      	b.n	8002d96 <HAL_SPI_Receive+0x21a>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd6:	f7fe fd87 	bl	80016e8 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
 8002bea:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bec:	e0ca      	b.n	8002d84 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Receive+0x7e>
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bfe:	e0c1      	b.n	8002d84 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2204      	movs	r2, #4
 8002c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c46:	d10f      	bne.n	8002c68 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d007      	beq.n	8002c86 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d162      	bne.n	8002d54 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c8e:	e02e      	b.n	8002cee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d115      	bne.n	8002cca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f103 020c 	add.w	r2, r3, #12
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc8:	e011      	b.n	8002cee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cca:	f7fe fd0d 	bl	80016e8 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d803      	bhi.n	8002ce2 <HAL_SPI_Receive+0x166>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d102      	bne.n	8002ce8 <HAL_SPI_Receive+0x16c>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cec:	e04a      	b.n	8002d84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1cb      	bne.n	8002c90 <HAL_SPI_Receive+0x114>
 8002cf8:	e031      	b.n	8002d5e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d113      	bne.n	8002d30 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	b292      	uxth	r2, r2
 8002d14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	1c9a      	adds	r2, r3, #2
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2e:	e011      	b.n	8002d54 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d30:	f7fe fcda 	bl	80016e8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d803      	bhi.n	8002d48 <HAL_SPI_Receive+0x1cc>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Receive+0x1d2>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d52:	e017      	b.n	8002d84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1cd      	bne.n	8002cfa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa92 	bl	800328c <SPI_EndRxTransaction>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2220      	movs	r2, #32
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
 8002d80:	e000      	b.n	8002d84 <HAL_SPI_Receive+0x208>
  }

error :
 8002d82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b08c      	sub	sp, #48	; 0x30
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dac:	2301      	movs	r3, #1
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x26>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e18a      	b.n	80030da <HAL_SPI_TransmitReceive+0x33c>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dcc:	f7fe fc8c 	bl	80016e8 <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d00f      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x70>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df4:	d107      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x68>
 8002dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d003      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e0c:	e15b      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_SPI_TransmitReceive+0x82>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_TransmitReceive+0x82>
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e26:	e14e      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d003      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2205      	movs	r2, #5
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	887a      	ldrh	r2, [r7, #2]
 8002e5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d007      	beq.n	8002e90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e98:	d178      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_SPI_TransmitReceive+0x10a>
 8002ea2:	8b7b      	ldrh	r3, [r7, #26]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d166      	bne.n	8002f76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ecc:	e053      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d11b      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x176>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x176>
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d113      	bne.n	8002f14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	1c9a      	adds	r2, r3, #2
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d119      	bne.n	8002f56 <HAL_SPI_TransmitReceive+0x1b8>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d014      	beq.n	8002f56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	b292      	uxth	r2, r2
 8002f38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	1c9a      	adds	r2, r3, #2
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f52:	2301      	movs	r3, #1
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f56:	f7fe fbc7 	bl	80016e8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d807      	bhi.n	8002f76 <HAL_SPI_TransmitReceive+0x1d8>
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d003      	beq.n	8002f76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f74:	e0a7      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1a6      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x130>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1a1      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x130>
 8002f8a:	e07c      	b.n	8003086 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x1fc>
 8002f94:	8b7b      	ldrh	r3, [r7, #26]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d16b      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc0:	e057      	b.n	8003072 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d11c      	bne.n	800300a <HAL_SPI_TransmitReceive+0x26c>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d017      	beq.n	800300a <HAL_SPI_TransmitReceive+0x26c>
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d114      	bne.n	800300a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d119      	bne.n	800304c <HAL_SPI_TransmitReceive+0x2ae>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d014      	beq.n	800304c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003048:	2301      	movs	r3, #1
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800304c:	f7fe fb4c 	bl	80016e8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003058:	429a      	cmp	r2, r3
 800305a:	d803      	bhi.n	8003064 <HAL_SPI_TransmitReceive+0x2c6>
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d102      	bne.n	800306a <HAL_SPI_TransmitReceive+0x2cc>
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003070:	e029      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1a2      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x224>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d19d      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f950 	bl	8003330 <SPI_EndRxTxTransaction>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030a2:	e010      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10b      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	e000      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3730      	adds	r7, #48	; 0x30
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00f      	beq.n	8003116 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fc66 	bl	80019cc <HAL_DMA_Abort>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	f043 0210 	orr.w	r2, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00f      	beq.n	800313e <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe fc52 	bl	80019cc <HAL_DMA_Abort>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0203 	bic.w	r2, r2, #3
 800314c:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800316e:	b2db      	uxtb	r3, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
	...

0800317c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800318c:	f7fe faac 	bl	80016e8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4413      	add	r3, r2
 800319a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800319c:	f7fe faa4 	bl	80016e8 <HAL_GetTick>
 80031a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031a2:	4b39      	ldr	r3, [pc, #228]	; (8003288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	015b      	lsls	r3, r3, #5
 80031a8:	0d1b      	lsrs	r3, r3, #20
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b2:	e054      	b.n	800325e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d050      	beq.n	800325e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031bc:	f7fe fa94 	bl	80016e8 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d902      	bls.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d13d      	bne.n	800324e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ea:	d111      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f4:	d004      	beq.n	8003200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d107      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003218:	d10f      	bne.n	800323a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e017      	b.n	800327e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3b01      	subs	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d19b      	bne.n	80031b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004

0800328c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a0:	d111      	bne.n	80032c6 <SPI_EndRxTransaction+0x3a>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032aa:	d004      	beq.n	80032b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b4:	d107      	bne.n	80032c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ce:	d117      	bne.n	8003300 <SPI_EndRxTransaction+0x74>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d112      	bne.n	8003300 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2101      	movs	r1, #1
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff ff49 	bl	800317c <SPI_WaitFlagStateUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01a      	beq.n	8003326 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e013      	b.n	8003328 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	2180      	movs	r1, #128	; 0x80
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f7ff ff36 	bl	800317c <SPI_WaitFlagStateUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e000      	b.n	8003328 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff ff18 	bl	800317c <SPI_WaitFlagStateUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e000      	b.n	8003364 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e041      	b.n	8003402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd ff08 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3304      	adds	r3, #4
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f000 f8f2 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_TIM_ConfigClockSource+0x18>
 800341e:	2302      	movs	r3, #2
 8003420:	e0b3      	b.n	800358a <HAL_TIM_ConfigClockSource+0x180>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003440:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003448:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345a:	d03e      	beq.n	80034da <HAL_TIM_ConfigClockSource+0xd0>
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	f200 8087 	bhi.w	8003572 <HAL_TIM_ConfigClockSource+0x168>
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	f000 8085 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d87f      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 8003472:	2b70      	cmp	r3, #112	; 0x70
 8003474:	d01a      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0xa2>
 8003476:	2b70      	cmp	r3, #112	; 0x70
 8003478:	d87b      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 800347a:	2b60      	cmp	r3, #96	; 0x60
 800347c:	d050      	beq.n	8003520 <HAL_TIM_ConfigClockSource+0x116>
 800347e:	2b60      	cmp	r3, #96	; 0x60
 8003480:	d877      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 8003482:	2b50      	cmp	r3, #80	; 0x50
 8003484:	d03c      	beq.n	8003500 <HAL_TIM_ConfigClockSource+0xf6>
 8003486:	2b50      	cmp	r3, #80	; 0x50
 8003488:	d873      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d058      	beq.n	8003540 <HAL_TIM_ConfigClockSource+0x136>
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d86f      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 8003492:	2b30      	cmp	r3, #48	; 0x30
 8003494:	d064      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0x156>
 8003496:	2b30      	cmp	r3, #48	; 0x30
 8003498:	d86b      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 800349a:	2b20      	cmp	r3, #32
 800349c:	d060      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0x156>
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d867      	bhi.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05c      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0x156>
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d05a      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034aa:	e062      	b.n	8003572 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f000 f943 	bl	8003746 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	609a      	str	r2, [r3, #8]
      break;
 80034d8:	e04e      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f000 f92c 	bl	8003746 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fc:	609a      	str	r2, [r3, #8]
      break;
 80034fe:	e03b      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	461a      	mov	r2, r3
 800350e:	f000 f8a3 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2150      	movs	r1, #80	; 0x50
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f8fa 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 800351e:	e02b      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	461a      	mov	r2, r3
 800352e:	f000 f8c1 	bl	80036b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2160      	movs	r1, #96	; 0x60
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f8ea 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 800353e:	e01b      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6859      	ldr	r1, [r3, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	461a      	mov	r2, r3
 800354e:	f000 f883 	bl	8003658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2140      	movs	r1, #64	; 0x40
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f8da 	bl	8003712 <TIM_ITRx_SetConfig>
      break;
 800355e:	e00b      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 f8d1 	bl	8003712 <TIM_ITRx_SetConfig>
        break;
 8003570:	e002      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <TIM_Base_SetConfig+0xb8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_Base_SetConfig+0x30>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b2:	d007      	beq.n	80035c4 <TIM_Base_SetConfig+0x30>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a26      	ldr	r2, [pc, #152]	; (8003650 <TIM_Base_SetConfig+0xbc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0x30>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a25      	ldr	r2, [pc, #148]	; (8003654 <TIM_Base_SetConfig+0xc0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <TIM_Base_SetConfig+0xb8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <TIM_Base_SetConfig+0x62>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d007      	beq.n	80035f6 <TIM_Base_SetConfig+0x62>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <TIM_Base_SetConfig+0xbc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_Base_SetConfig+0x62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a18      	ldr	r2, [pc, #96]	; (8003654 <TIM_Base_SetConfig+0xc0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <TIM_Base_SetConfig+0xb8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800

08003658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	f023 0201 	bic.w	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 030a 	bic.w	r3, r3, #10
 8003694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	621a      	str	r2, [r3, #32]
}
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f023 0210 	bic.w	r2, r3, #16
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	031b      	lsls	r3, r3, #12
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003728:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	f043 0307 	orr.w	r3, r3, #7
 8003734:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003746:	b480      	push	{r7}
 8003748:	b087      	sub	sp, #28
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003760:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	431a      	orrs	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4313      	orrs	r3, r2
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	609a      	str	r2, [r3, #8]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e046      	b.n	800382a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d009      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a10      	ldr	r2, [pc, #64]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800

08003840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e03f      	b.n	80038d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fcbc 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f905 	bl	8003a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b08a      	sub	sp, #40	; 0x28
 80038de:	af02      	add	r7, sp, #8
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d17c      	bne.n	80039f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_Transmit+0x2c>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e075      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UART_Transmit+0x3e>
 8003914:	2302      	movs	r3, #2
 8003916:	e06e      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fd fedb 	bl	80016e8 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	88fa      	ldrh	r2, [r7, #6]
 800393e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d108      	bne.n	800395c <HAL_UART_Transmit+0x82>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e003      	b.n	8003964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800396c:	e02a      	b.n	80039c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2180      	movs	r1, #128	; 0x80
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f840 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e036      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3302      	adds	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e007      	b.n	80039b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	781a      	ldrb	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	3301      	adds	r3, #1
 80039b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cf      	bne.n	800396e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f810 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e006      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e000      	b.n	80039f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	e02c      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d028      	beq.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	f7fd fe63 	bl	80016e8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d21d      	bcs.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e00f      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	bf0c      	ite	eq
 8003a7a:	2301      	moveq	r3, #1
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d0c3      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ace:	f023 030c 	bic.w	r3, r3, #12
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2c      	ldr	r2, [pc, #176]	; (8003ba8 <UART_SetConfig+0x114>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d103      	bne.n	8003b04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7fe fe4c 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	e002      	b.n	8003b0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b04:	f7fe fe34 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 8003b08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	4a22      	ldr	r2, [pc, #136]	; (8003bac <UART_SetConfig+0x118>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	0119      	lsls	r1, r3, #4
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009a      	lsls	r2, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <UART_SetConfig+0x118>)
 8003b42:	fba3 0302 	umull	r0, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2064      	movs	r0, #100	; 0x64
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	3332      	adds	r3, #50	; 0x32
 8003b54:	4a15      	ldr	r2, [pc, #84]	; (8003bac <UART_SetConfig+0x118>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b60:	4419      	add	r1, r3
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <UART_SetConfig+0x118>)
 8003b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	2064      	movs	r0, #100	; 0x64
 8003b82:	fb00 f303 	mul.w	r3, r0, r3
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	3332      	adds	r3, #50	; 0x32
 8003b8c:	4a07      	ldr	r2, [pc, #28]	; (8003bac <UART_SetConfig+0x118>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	f003 020f 	and.w	r2, r3, #15
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ba0:	bf00      	nop
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40013800 	.word	0x40013800
 8003bac:	51eb851f 	.word	0x51eb851f

08003bb0 <USART_GetITStatus>:
#endif /* HAL_UART_MODULE_ENABLED */
/**
  * @}
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8003bde:	2201      	movs	r2, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d105      	bne.n	8003bfa <USART_GetITStatus+0x4a>
  {
    itmask &= USARTx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e00d      	b.n	8003c16 <USART_GetITStatus+0x66>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d105      	bne.n	8003c0c <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4013      	ands	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e004      	b.n	8003c16 <USART_GetITStatus+0x66>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <USART_GetITStatus+0x94>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <USART_GetITStatus+0x94>
  {
    bitstatus = SET;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	74fb      	strb	r3, [r7, #19]
 8003c42:	e001      	b.n	8003c48 <USART_GetITStatus+0x98>
  }
  else
  {
    bitstatus = RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
 8003c48:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <__errno>:
 8003c54:	4b01      	ldr	r3, [pc, #4]	; (8003c5c <__errno+0x8>)
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000010 	.word	0x20000010

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	2600      	movs	r6, #0
 8003c64:	4d0c      	ldr	r5, [pc, #48]	; (8003c98 <__libc_init_array+0x38>)
 8003c66:	4c0d      	ldr	r4, [pc, #52]	; (8003c9c <__libc_init_array+0x3c>)
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	f000 fd18 	bl	80046a4 <_init>
 8003c74:	2600      	movs	r6, #0
 8003c76:	4d0a      	ldr	r5, [pc, #40]	; (8003ca0 <__libc_init_array+0x40>)
 8003c78:	4c0a      	ldr	r4, [pc, #40]	; (8003ca4 <__libc_init_array+0x44>)
 8003c7a:	1b64      	subs	r4, r4, r5
 8003c7c:	10a4      	asrs	r4, r4, #2
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08004f18 	.word	0x08004f18
 8003c9c:	08004f18 	.word	0x08004f18
 8003ca0:	08004f18 	.word	0x08004f18
 8003ca4:	08004f1c 	.word	0x08004f1c

08003ca8 <memset>:
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4402      	add	r2, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <_puts_r>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	460e      	mov	r6, r1
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	b118      	cbz	r0, 8003cc8 <_puts_r+0x10>
 8003cc0:	6983      	ldr	r3, [r0, #24]
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <_puts_r+0x10>
 8003cc4:	f000 fa44 	bl	8004150 <__sinit>
 8003cc8:	69ab      	ldr	r3, [r5, #24]
 8003cca:	68ac      	ldr	r4, [r5, #8]
 8003ccc:	b913      	cbnz	r3, 8003cd4 <_puts_r+0x1c>
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 fa3e 	bl	8004150 <__sinit>
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <_puts_r+0xd0>)
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d120      	bne.n	8003d1c <_puts_r+0x64>
 8003cda:	686c      	ldr	r4, [r5, #4]
 8003cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cde:	07db      	lsls	r3, r3, #31
 8003ce0:	d405      	bmi.n	8003cee <_puts_r+0x36>
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	0598      	lsls	r0, r3, #22
 8003ce6:	d402      	bmi.n	8003cee <_puts_r+0x36>
 8003ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cea:	f000 facf 	bl	800428c <__retarget_lock_acquire_recursive>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	0719      	lsls	r1, r3, #28
 8003cf2:	d51d      	bpl.n	8003d30 <_puts_r+0x78>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	b1db      	cbz	r3, 8003d30 <_puts_r+0x78>
 8003cf8:	3e01      	subs	r6, #1
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d00:	3b01      	subs	r3, #1
 8003d02:	60a3      	str	r3, [r4, #8]
 8003d04:	bb39      	cbnz	r1, 8003d56 <_puts_r+0x9e>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da38      	bge.n	8003d7c <_puts_r+0xc4>
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	210a      	movs	r1, #10
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f000 f848 	bl	8003da4 <__swbuf_r>
 8003d14:	3001      	adds	r0, #1
 8003d16:	d011      	beq.n	8003d3c <_puts_r+0x84>
 8003d18:	250a      	movs	r5, #10
 8003d1a:	e011      	b.n	8003d40 <_puts_r+0x88>
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <_puts_r+0xd4>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d101      	bne.n	8003d26 <_puts_r+0x6e>
 8003d22:	68ac      	ldr	r4, [r5, #8]
 8003d24:	e7da      	b.n	8003cdc <_puts_r+0x24>
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <_puts_r+0xd8>)
 8003d28:	429c      	cmp	r4, r3
 8003d2a:	bf08      	it	eq
 8003d2c:	68ec      	ldreq	r4, [r5, #12]
 8003d2e:	e7d5      	b.n	8003cdc <_puts_r+0x24>
 8003d30:	4621      	mov	r1, r4
 8003d32:	4628      	mov	r0, r5
 8003d34:	f000 f888 	bl	8003e48 <__swsetup_r>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d0dd      	beq.n	8003cf8 <_puts_r+0x40>
 8003d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8003d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d42:	07da      	lsls	r2, r3, #31
 8003d44:	d405      	bmi.n	8003d52 <_puts_r+0x9a>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	059b      	lsls	r3, r3, #22
 8003d4a:	d402      	bmi.n	8003d52 <_puts_r+0x9a>
 8003d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d4e:	f000 fa9e 	bl	800428e <__retarget_lock_release_recursive>
 8003d52:	4628      	mov	r0, r5
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	da04      	bge.n	8003d64 <_puts_r+0xac>
 8003d5a:	69a2      	ldr	r2, [r4, #24]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	dc06      	bgt.n	8003d6e <_puts_r+0xb6>
 8003d60:	290a      	cmp	r1, #10
 8003d62:	d004      	beq.n	8003d6e <_puts_r+0xb6>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	6022      	str	r2, [r4, #0]
 8003d6a:	7019      	strb	r1, [r3, #0]
 8003d6c:	e7c5      	b.n	8003cfa <_puts_r+0x42>
 8003d6e:	4622      	mov	r2, r4
 8003d70:	4628      	mov	r0, r5
 8003d72:	f000 f817 	bl	8003da4 <__swbuf_r>
 8003d76:	3001      	adds	r0, #1
 8003d78:	d1bf      	bne.n	8003cfa <_puts_r+0x42>
 8003d7a:	e7df      	b.n	8003d3c <_puts_r+0x84>
 8003d7c:	250a      	movs	r5, #10
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	6022      	str	r2, [r4, #0]
 8003d84:	701d      	strb	r5, [r3, #0]
 8003d86:	e7db      	b.n	8003d40 <_puts_r+0x88>
 8003d88:	08004ed8 	.word	0x08004ed8
 8003d8c:	08004ef8 	.word	0x08004ef8
 8003d90:	08004eb8 	.word	0x08004eb8

08003d94 <puts>:
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <puts+0xc>)
 8003d96:	4601      	mov	r1, r0
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	f7ff bf8d 	b.w	8003cb8 <_puts_r>
 8003d9e:	bf00      	nop
 8003da0:	20000010 	.word	0x20000010

08003da4 <__swbuf_r>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	460e      	mov	r6, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	4605      	mov	r5, r0
 8003dac:	b118      	cbz	r0, 8003db6 <__swbuf_r+0x12>
 8003dae:	6983      	ldr	r3, [r0, #24]
 8003db0:	b90b      	cbnz	r3, 8003db6 <__swbuf_r+0x12>
 8003db2:	f000 f9cd 	bl	8004150 <__sinit>
 8003db6:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <__swbuf_r+0x98>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d12b      	bne.n	8003e14 <__swbuf_r+0x70>
 8003dbc:	686c      	ldr	r4, [r5, #4]
 8003dbe:	69a3      	ldr	r3, [r4, #24]
 8003dc0:	60a3      	str	r3, [r4, #8]
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	071a      	lsls	r2, r3, #28
 8003dc6:	d52f      	bpl.n	8003e28 <__swbuf_r+0x84>
 8003dc8:	6923      	ldr	r3, [r4, #16]
 8003dca:	b36b      	cbz	r3, 8003e28 <__swbuf_r+0x84>
 8003dcc:	6923      	ldr	r3, [r4, #16]
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	b2f6      	uxtb	r6, r6
 8003dd2:	1ac0      	subs	r0, r0, r3
 8003dd4:	6963      	ldr	r3, [r4, #20]
 8003dd6:	4637      	mov	r7, r6
 8003dd8:	4283      	cmp	r3, r0
 8003dda:	dc04      	bgt.n	8003de6 <__swbuf_r+0x42>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f922 	bl	8004028 <_fflush_r>
 8003de4:	bb30      	cbnz	r0, 8003e34 <__swbuf_r+0x90>
 8003de6:	68a3      	ldr	r3, [r4, #8]
 8003de8:	3001      	adds	r0, #1
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60a3      	str	r3, [r4, #8]
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	6022      	str	r2, [r4, #0]
 8003df4:	701e      	strb	r6, [r3, #0]
 8003df6:	6963      	ldr	r3, [r4, #20]
 8003df8:	4283      	cmp	r3, r0
 8003dfa:	d004      	beq.n	8003e06 <__swbuf_r+0x62>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	07db      	lsls	r3, r3, #31
 8003e00:	d506      	bpl.n	8003e10 <__swbuf_r+0x6c>
 8003e02:	2e0a      	cmp	r6, #10
 8003e04:	d104      	bne.n	8003e10 <__swbuf_r+0x6c>
 8003e06:	4621      	mov	r1, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 f90d 	bl	8004028 <_fflush_r>
 8003e0e:	b988      	cbnz	r0, 8003e34 <__swbuf_r+0x90>
 8003e10:	4638      	mov	r0, r7
 8003e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <__swbuf_r+0x9c>)
 8003e16:	429c      	cmp	r4, r3
 8003e18:	d101      	bne.n	8003e1e <__swbuf_r+0x7a>
 8003e1a:	68ac      	ldr	r4, [r5, #8]
 8003e1c:	e7cf      	b.n	8003dbe <__swbuf_r+0x1a>
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <__swbuf_r+0xa0>)
 8003e20:	429c      	cmp	r4, r3
 8003e22:	bf08      	it	eq
 8003e24:	68ec      	ldreq	r4, [r5, #12]
 8003e26:	e7ca      	b.n	8003dbe <__swbuf_r+0x1a>
 8003e28:	4621      	mov	r1, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 f80c 	bl	8003e48 <__swsetup_r>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d0cb      	beq.n	8003dcc <__swbuf_r+0x28>
 8003e34:	f04f 37ff 	mov.w	r7, #4294967295
 8003e38:	e7ea      	b.n	8003e10 <__swbuf_r+0x6c>
 8003e3a:	bf00      	nop
 8003e3c:	08004ed8 	.word	0x08004ed8
 8003e40:	08004ef8 	.word	0x08004ef8
 8003e44:	08004eb8 	.word	0x08004eb8

08003e48 <__swsetup_r>:
 8003e48:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <__swsetup_r+0xcc>)
 8003e4a:	b570      	push	{r4, r5, r6, lr}
 8003e4c:	681d      	ldr	r5, [r3, #0]
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460c      	mov	r4, r1
 8003e52:	b125      	cbz	r5, 8003e5e <__swsetup_r+0x16>
 8003e54:	69ab      	ldr	r3, [r5, #24]
 8003e56:	b913      	cbnz	r3, 8003e5e <__swsetup_r+0x16>
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f979 	bl	8004150 <__sinit>
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <__swsetup_r+0xd0>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d10f      	bne.n	8003e84 <__swsetup_r+0x3c>
 8003e64:	686c      	ldr	r4, [r5, #4]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e6c:	0719      	lsls	r1, r3, #28
 8003e6e:	d42c      	bmi.n	8003eca <__swsetup_r+0x82>
 8003e70:	06dd      	lsls	r5, r3, #27
 8003e72:	d411      	bmi.n	8003e98 <__swsetup_r+0x50>
 8003e74:	2309      	movs	r3, #9
 8003e76:	6033      	str	r3, [r6, #0]
 8003e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	e03e      	b.n	8003f02 <__swsetup_r+0xba>
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <__swsetup_r+0xd4>)
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d101      	bne.n	8003e8e <__swsetup_r+0x46>
 8003e8a:	68ac      	ldr	r4, [r5, #8]
 8003e8c:	e7eb      	b.n	8003e66 <__swsetup_r+0x1e>
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <__swsetup_r+0xd8>)
 8003e90:	429c      	cmp	r4, r3
 8003e92:	bf08      	it	eq
 8003e94:	68ec      	ldreq	r4, [r5, #12]
 8003e96:	e7e6      	b.n	8003e66 <__swsetup_r+0x1e>
 8003e98:	0758      	lsls	r0, r3, #29
 8003e9a:	d512      	bpl.n	8003ec2 <__swsetup_r+0x7a>
 8003e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9e:	b141      	cbz	r1, 8003eb2 <__swsetup_r+0x6a>
 8003ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d002      	beq.n	8003eae <__swsetup_r+0x66>
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f000 fa57 	bl	800435c <_free_r>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	b94b      	cbnz	r3, 8003ee2 <__swsetup_r+0x9a>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d003      	beq.n	8003ee2 <__swsetup_r+0x9a>
 8003eda:	4621      	mov	r1, r4
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f9fd 	bl	80042dc <__smakebuf_r>
 8003ee2:	89a0      	ldrh	r0, [r4, #12]
 8003ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee8:	f010 0301 	ands.w	r3, r0, #1
 8003eec:	d00a      	beq.n	8003f04 <__swsetup_r+0xbc>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	6963      	ldr	r3, [r4, #20]
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	61a3      	str	r3, [r4, #24]
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b943      	cbnz	r3, 8003f0e <__swsetup_r+0xc6>
 8003efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f00:	d1ba      	bne.n	8003e78 <__swsetup_r+0x30>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	0781      	lsls	r1, r0, #30
 8003f06:	bf58      	it	pl
 8003f08:	6963      	ldrpl	r3, [r4, #20]
 8003f0a:	60a3      	str	r3, [r4, #8]
 8003f0c:	e7f4      	b.n	8003ef8 <__swsetup_r+0xb0>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7f7      	b.n	8003f02 <__swsetup_r+0xba>
 8003f12:	bf00      	nop
 8003f14:	20000010 	.word	0x20000010
 8003f18:	08004ed8 	.word	0x08004ed8
 8003f1c:	08004ef8 	.word	0x08004ef8
 8003f20:	08004eb8 	.word	0x08004eb8

08003f24 <__sflush_r>:
 8003f24:	898a      	ldrh	r2, [r1, #12]
 8003f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f28:	4605      	mov	r5, r0
 8003f2a:	0710      	lsls	r0, r2, #28
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	d457      	bmi.n	8003fe0 <__sflush_r+0xbc>
 8003f30:	684b      	ldr	r3, [r1, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dc04      	bgt.n	8003f40 <__sflush_r+0x1c>
 8003f36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dc01      	bgt.n	8003f40 <__sflush_r+0x1c>
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f42:	2e00      	cmp	r6, #0
 8003f44:	d0fa      	beq.n	8003f3c <__sflush_r+0x18>
 8003f46:	2300      	movs	r3, #0
 8003f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f4c:	682f      	ldr	r7, [r5, #0]
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	d032      	beq.n	8003fb8 <__sflush_r+0x94>
 8003f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	075a      	lsls	r2, r3, #29
 8003f58:	d505      	bpl.n	8003f66 <__sflush_r+0x42>
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	1ac0      	subs	r0, r0, r3
 8003f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f60:	b10b      	cbz	r3, 8003f66 <__sflush_r+0x42>
 8003f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f64:	1ac0      	subs	r0, r0, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	6a21      	ldr	r1, [r4, #32]
 8003f70:	47b0      	blx	r6
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	d106      	bne.n	8003f86 <__sflush_r+0x62>
 8003f78:	6829      	ldr	r1, [r5, #0]
 8003f7a:	291d      	cmp	r1, #29
 8003f7c:	d82c      	bhi.n	8003fd8 <__sflush_r+0xb4>
 8003f7e:	4a29      	ldr	r2, [pc, #164]	; (8004024 <__sflush_r+0x100>)
 8003f80:	40ca      	lsrs	r2, r1
 8003f82:	07d6      	lsls	r6, r2, #31
 8003f84:	d528      	bpl.n	8003fd8 <__sflush_r+0xb4>
 8003f86:	2200      	movs	r2, #0
 8003f88:	6062      	str	r2, [r4, #4]
 8003f8a:	6922      	ldr	r2, [r4, #16]
 8003f8c:	04d9      	lsls	r1, r3, #19
 8003f8e:	6022      	str	r2, [r4, #0]
 8003f90:	d504      	bpl.n	8003f9c <__sflush_r+0x78>
 8003f92:	1c42      	adds	r2, r0, #1
 8003f94:	d101      	bne.n	8003f9a <__sflush_r+0x76>
 8003f96:	682b      	ldr	r3, [r5, #0]
 8003f98:	b903      	cbnz	r3, 8003f9c <__sflush_r+0x78>
 8003f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8003f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f9e:	602f      	str	r7, [r5, #0]
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	d0cb      	beq.n	8003f3c <__sflush_r+0x18>
 8003fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	d002      	beq.n	8003fb2 <__sflush_r+0x8e>
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 f9d5 	bl	800435c <_free_r>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8003fb6:	e7c2      	b.n	8003f3e <__sflush_r+0x1a>
 8003fb8:	6a21      	ldr	r1, [r4, #32]
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	47b0      	blx	r6
 8003fc0:	1c41      	adds	r1, r0, #1
 8003fc2:	d1c7      	bne.n	8003f54 <__sflush_r+0x30>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0c4      	beq.n	8003f54 <__sflush_r+0x30>
 8003fca:	2b1d      	cmp	r3, #29
 8003fcc:	d001      	beq.n	8003fd2 <__sflush_r+0xae>
 8003fce:	2b16      	cmp	r3, #22
 8003fd0:	d101      	bne.n	8003fd6 <__sflush_r+0xb2>
 8003fd2:	602f      	str	r7, [r5, #0]
 8003fd4:	e7b2      	b.n	8003f3c <__sflush_r+0x18>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e7ae      	b.n	8003f3e <__sflush_r+0x1a>
 8003fe0:	690f      	ldr	r7, [r1, #16]
 8003fe2:	2f00      	cmp	r7, #0
 8003fe4:	d0aa      	beq.n	8003f3c <__sflush_r+0x18>
 8003fe6:	0793      	lsls	r3, r2, #30
 8003fe8:	bf18      	it	ne
 8003fea:	2300      	movne	r3, #0
 8003fec:	680e      	ldr	r6, [r1, #0]
 8003fee:	bf08      	it	eq
 8003ff0:	694b      	ldreq	r3, [r1, #20]
 8003ff2:	1bf6      	subs	r6, r6, r7
 8003ff4:	600f      	str	r7, [r1, #0]
 8003ff6:	608b      	str	r3, [r1, #8]
 8003ff8:	2e00      	cmp	r6, #0
 8003ffa:	dd9f      	ble.n	8003f3c <__sflush_r+0x18>
 8003ffc:	4633      	mov	r3, r6
 8003ffe:	463a      	mov	r2, r7
 8004000:	4628      	mov	r0, r5
 8004002:	6a21      	ldr	r1, [r4, #32]
 8004004:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004008:	47e0      	blx	ip
 800400a:	2800      	cmp	r0, #0
 800400c:	dc06      	bgt.n	800401c <__sflush_r+0xf8>
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	e790      	b.n	8003f3e <__sflush_r+0x1a>
 800401c:	4407      	add	r7, r0
 800401e:	1a36      	subs	r6, r6, r0
 8004020:	e7ea      	b.n	8003ff8 <__sflush_r+0xd4>
 8004022:	bf00      	nop
 8004024:	20400001 	.word	0x20400001

08004028 <_fflush_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	690b      	ldr	r3, [r1, #16]
 800402c:	4605      	mov	r5, r0
 800402e:	460c      	mov	r4, r1
 8004030:	b913      	cbnz	r3, 8004038 <_fflush_r+0x10>
 8004032:	2500      	movs	r5, #0
 8004034:	4628      	mov	r0, r5
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	b118      	cbz	r0, 8004042 <_fflush_r+0x1a>
 800403a:	6983      	ldr	r3, [r0, #24]
 800403c:	b90b      	cbnz	r3, 8004042 <_fflush_r+0x1a>
 800403e:	f000 f887 	bl	8004150 <__sinit>
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <_fflush_r+0x6c>)
 8004044:	429c      	cmp	r4, r3
 8004046:	d11b      	bne.n	8004080 <_fflush_r+0x58>
 8004048:	686c      	ldr	r4, [r5, #4]
 800404a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ef      	beq.n	8004032 <_fflush_r+0xa>
 8004052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004054:	07d0      	lsls	r0, r2, #31
 8004056:	d404      	bmi.n	8004062 <_fflush_r+0x3a>
 8004058:	0599      	lsls	r1, r3, #22
 800405a:	d402      	bmi.n	8004062 <_fflush_r+0x3a>
 800405c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405e:	f000 f915 	bl	800428c <__retarget_lock_acquire_recursive>
 8004062:	4628      	mov	r0, r5
 8004064:	4621      	mov	r1, r4
 8004066:	f7ff ff5d 	bl	8003f24 <__sflush_r>
 800406a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800406c:	4605      	mov	r5, r0
 800406e:	07da      	lsls	r2, r3, #31
 8004070:	d4e0      	bmi.n	8004034 <_fflush_r+0xc>
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	059b      	lsls	r3, r3, #22
 8004076:	d4dd      	bmi.n	8004034 <_fflush_r+0xc>
 8004078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407a:	f000 f908 	bl	800428e <__retarget_lock_release_recursive>
 800407e:	e7d9      	b.n	8004034 <_fflush_r+0xc>
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <_fflush_r+0x70>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d101      	bne.n	800408a <_fflush_r+0x62>
 8004086:	68ac      	ldr	r4, [r5, #8]
 8004088:	e7df      	b.n	800404a <_fflush_r+0x22>
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <_fflush_r+0x74>)
 800408c:	429c      	cmp	r4, r3
 800408e:	bf08      	it	eq
 8004090:	68ec      	ldreq	r4, [r5, #12]
 8004092:	e7da      	b.n	800404a <_fflush_r+0x22>
 8004094:	08004ed8 	.word	0x08004ed8
 8004098:	08004ef8 	.word	0x08004ef8
 800409c:	08004eb8 	.word	0x08004eb8

080040a0 <std>:
 80040a0:	2300      	movs	r3, #0
 80040a2:	b510      	push	{r4, lr}
 80040a4:	4604      	mov	r4, r0
 80040a6:	e9c0 3300 	strd	r3, r3, [r0]
 80040aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ae:	6083      	str	r3, [r0, #8]
 80040b0:	8181      	strh	r1, [r0, #12]
 80040b2:	6643      	str	r3, [r0, #100]	; 0x64
 80040b4:	81c2      	strh	r2, [r0, #14]
 80040b6:	6183      	str	r3, [r0, #24]
 80040b8:	4619      	mov	r1, r3
 80040ba:	2208      	movs	r2, #8
 80040bc:	305c      	adds	r0, #92	; 0x5c
 80040be:	f7ff fdf3 	bl	8003ca8 <memset>
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <std+0x38>)
 80040c4:	6224      	str	r4, [r4, #32]
 80040c6:	6263      	str	r3, [r4, #36]	; 0x24
 80040c8:	4b04      	ldr	r3, [pc, #16]	; (80040dc <std+0x3c>)
 80040ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <std+0x40>)
 80040ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <std+0x44>)
 80040d2:	6323      	str	r3, [r4, #48]	; 0x30
 80040d4:	bd10      	pop	{r4, pc}
 80040d6:	bf00      	nop
 80040d8:	08004535 	.word	0x08004535
 80040dc:	08004557 	.word	0x08004557
 80040e0:	0800458f 	.word	0x0800458f
 80040e4:	080045b3 	.word	0x080045b3

080040e8 <_cleanup_r>:
 80040e8:	4901      	ldr	r1, [pc, #4]	; (80040f0 <_cleanup_r+0x8>)
 80040ea:	f000 b8af 	b.w	800424c <_fwalk_reent>
 80040ee:	bf00      	nop
 80040f0:	08004029 	.word	0x08004029

080040f4 <__sfmoreglue>:
 80040f4:	2268      	movs	r2, #104	; 0x68
 80040f6:	b570      	push	{r4, r5, r6, lr}
 80040f8:	1e4d      	subs	r5, r1, #1
 80040fa:	4355      	muls	r5, r2
 80040fc:	460e      	mov	r6, r1
 80040fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004102:	f000 f993 	bl	800442c <_malloc_r>
 8004106:	4604      	mov	r4, r0
 8004108:	b140      	cbz	r0, 800411c <__sfmoreglue+0x28>
 800410a:	2100      	movs	r1, #0
 800410c:	e9c0 1600 	strd	r1, r6, [r0]
 8004110:	300c      	adds	r0, #12
 8004112:	60a0      	str	r0, [r4, #8]
 8004114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004118:	f7ff fdc6 	bl	8003ca8 <memset>
 800411c:	4620      	mov	r0, r4
 800411e:	bd70      	pop	{r4, r5, r6, pc}

08004120 <__sfp_lock_acquire>:
 8004120:	4801      	ldr	r0, [pc, #4]	; (8004128 <__sfp_lock_acquire+0x8>)
 8004122:	f000 b8b3 	b.w	800428c <__retarget_lock_acquire_recursive>
 8004126:	bf00      	nop
 8004128:	20002271 	.word	0x20002271

0800412c <__sfp_lock_release>:
 800412c:	4801      	ldr	r0, [pc, #4]	; (8004134 <__sfp_lock_release+0x8>)
 800412e:	f000 b8ae 	b.w	800428e <__retarget_lock_release_recursive>
 8004132:	bf00      	nop
 8004134:	20002271 	.word	0x20002271

08004138 <__sinit_lock_acquire>:
 8004138:	4801      	ldr	r0, [pc, #4]	; (8004140 <__sinit_lock_acquire+0x8>)
 800413a:	f000 b8a7 	b.w	800428c <__retarget_lock_acquire_recursive>
 800413e:	bf00      	nop
 8004140:	20002272 	.word	0x20002272

08004144 <__sinit_lock_release>:
 8004144:	4801      	ldr	r0, [pc, #4]	; (800414c <__sinit_lock_release+0x8>)
 8004146:	f000 b8a2 	b.w	800428e <__retarget_lock_release_recursive>
 800414a:	bf00      	nop
 800414c:	20002272 	.word	0x20002272

08004150 <__sinit>:
 8004150:	b510      	push	{r4, lr}
 8004152:	4604      	mov	r4, r0
 8004154:	f7ff fff0 	bl	8004138 <__sinit_lock_acquire>
 8004158:	69a3      	ldr	r3, [r4, #24]
 800415a:	b11b      	cbz	r3, 8004164 <__sinit+0x14>
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004160:	f7ff bff0 	b.w	8004144 <__sinit_lock_release>
 8004164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004168:	6523      	str	r3, [r4, #80]	; 0x50
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <__sinit+0x68>)
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <__sinit+0x6c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	62a2      	str	r2, [r4, #40]	; 0x28
 8004172:	42a3      	cmp	r3, r4
 8004174:	bf08      	it	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	4620      	mov	r0, r4
 800417a:	bf08      	it	eq
 800417c:	61a3      	streq	r3, [r4, #24]
 800417e:	f000 f81f 	bl	80041c0 <__sfp>
 8004182:	6060      	str	r0, [r4, #4]
 8004184:	4620      	mov	r0, r4
 8004186:	f000 f81b 	bl	80041c0 <__sfp>
 800418a:	60a0      	str	r0, [r4, #8]
 800418c:	4620      	mov	r0, r4
 800418e:	f000 f817 	bl	80041c0 <__sfp>
 8004192:	2200      	movs	r2, #0
 8004194:	2104      	movs	r1, #4
 8004196:	60e0      	str	r0, [r4, #12]
 8004198:	6860      	ldr	r0, [r4, #4]
 800419a:	f7ff ff81 	bl	80040a0 <std>
 800419e:	2201      	movs	r2, #1
 80041a0:	2109      	movs	r1, #9
 80041a2:	68a0      	ldr	r0, [r4, #8]
 80041a4:	f7ff ff7c 	bl	80040a0 <std>
 80041a8:	2202      	movs	r2, #2
 80041aa:	2112      	movs	r1, #18
 80041ac:	68e0      	ldr	r0, [r4, #12]
 80041ae:	f7ff ff77 	bl	80040a0 <std>
 80041b2:	2301      	movs	r3, #1
 80041b4:	61a3      	str	r3, [r4, #24]
 80041b6:	e7d1      	b.n	800415c <__sinit+0xc>
 80041b8:	08004eb4 	.word	0x08004eb4
 80041bc:	080040e9 	.word	0x080040e9

080041c0 <__sfp>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	4607      	mov	r7, r0
 80041c4:	f7ff ffac 	bl	8004120 <__sfp_lock_acquire>
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <__sfp+0x84>)
 80041ca:	681e      	ldr	r6, [r3, #0]
 80041cc:	69b3      	ldr	r3, [r6, #24]
 80041ce:	b913      	cbnz	r3, 80041d6 <__sfp+0x16>
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff ffbd 	bl	8004150 <__sinit>
 80041d6:	3648      	adds	r6, #72	; 0x48
 80041d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	d503      	bpl.n	80041e8 <__sfp+0x28>
 80041e0:	6833      	ldr	r3, [r6, #0]
 80041e2:	b30b      	cbz	r3, 8004228 <__sfp+0x68>
 80041e4:	6836      	ldr	r6, [r6, #0]
 80041e6:	e7f7      	b.n	80041d8 <__sfp+0x18>
 80041e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041ec:	b9d5      	cbnz	r5, 8004224 <__sfp+0x64>
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <__sfp+0x88>)
 80041f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041f4:	60e3      	str	r3, [r4, #12]
 80041f6:	6665      	str	r5, [r4, #100]	; 0x64
 80041f8:	f000 f847 	bl	800428a <__retarget_lock_init_recursive>
 80041fc:	f7ff ff96 	bl	800412c <__sfp_lock_release>
 8004200:	2208      	movs	r2, #8
 8004202:	4629      	mov	r1, r5
 8004204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800420c:	6025      	str	r5, [r4, #0]
 800420e:	61a5      	str	r5, [r4, #24]
 8004210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004214:	f7ff fd48 	bl	8003ca8 <memset>
 8004218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800421c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004220:	4620      	mov	r0, r4
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	3468      	adds	r4, #104	; 0x68
 8004226:	e7d9      	b.n	80041dc <__sfp+0x1c>
 8004228:	2104      	movs	r1, #4
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff ff62 	bl	80040f4 <__sfmoreglue>
 8004230:	4604      	mov	r4, r0
 8004232:	6030      	str	r0, [r6, #0]
 8004234:	2800      	cmp	r0, #0
 8004236:	d1d5      	bne.n	80041e4 <__sfp+0x24>
 8004238:	f7ff ff78 	bl	800412c <__sfp_lock_release>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	e7ee      	b.n	8004220 <__sfp+0x60>
 8004242:	bf00      	nop
 8004244:	08004eb4 	.word	0x08004eb4
 8004248:	ffff0001 	.word	0xffff0001

0800424c <_fwalk_reent>:
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004250:	4606      	mov	r6, r0
 8004252:	4688      	mov	r8, r1
 8004254:	2700      	movs	r7, #0
 8004256:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800425a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800425e:	f1b9 0901 	subs.w	r9, r9, #1
 8004262:	d505      	bpl.n	8004270 <_fwalk_reent+0x24>
 8004264:	6824      	ldr	r4, [r4, #0]
 8004266:	2c00      	cmp	r4, #0
 8004268:	d1f7      	bne.n	800425a <_fwalk_reent+0xe>
 800426a:	4638      	mov	r0, r7
 800426c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004270:	89ab      	ldrh	r3, [r5, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d907      	bls.n	8004286 <_fwalk_reent+0x3a>
 8004276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800427a:	3301      	adds	r3, #1
 800427c:	d003      	beq.n	8004286 <_fwalk_reent+0x3a>
 800427e:	4629      	mov	r1, r5
 8004280:	4630      	mov	r0, r6
 8004282:	47c0      	blx	r8
 8004284:	4307      	orrs	r7, r0
 8004286:	3568      	adds	r5, #104	; 0x68
 8004288:	e7e9      	b.n	800425e <_fwalk_reent+0x12>

0800428a <__retarget_lock_init_recursive>:
 800428a:	4770      	bx	lr

0800428c <__retarget_lock_acquire_recursive>:
 800428c:	4770      	bx	lr

0800428e <__retarget_lock_release_recursive>:
 800428e:	4770      	bx	lr

08004290 <__swhatbuf_r>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	460e      	mov	r6, r1
 8004294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004298:	4614      	mov	r4, r2
 800429a:	2900      	cmp	r1, #0
 800429c:	461d      	mov	r5, r3
 800429e:	b096      	sub	sp, #88	; 0x58
 80042a0:	da08      	bge.n	80042b4 <__swhatbuf_r+0x24>
 80042a2:	2200      	movs	r2, #0
 80042a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	061a      	lsls	r2, r3, #24
 80042ac:	d410      	bmi.n	80042d0 <__swhatbuf_r+0x40>
 80042ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b2:	e00e      	b.n	80042d2 <__swhatbuf_r+0x42>
 80042b4:	466a      	mov	r2, sp
 80042b6:	f000 f9a3 	bl	8004600 <_fstat_r>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	dbf1      	blt.n	80042a2 <__swhatbuf_r+0x12>
 80042be:	9a01      	ldr	r2, [sp, #4]
 80042c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042c8:	425a      	negs	r2, r3
 80042ca:	415a      	adcs	r2, r3
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	e7ee      	b.n	80042ae <__swhatbuf_r+0x1e>
 80042d0:	2340      	movs	r3, #64	; 0x40
 80042d2:	2000      	movs	r0, #0
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	b016      	add	sp, #88	; 0x58
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080042dc <__smakebuf_r>:
 80042dc:	898b      	ldrh	r3, [r1, #12]
 80042de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042e0:	079d      	lsls	r5, r3, #30
 80042e2:	4606      	mov	r6, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	d507      	bpl.n	80042f8 <__smakebuf_r+0x1c>
 80042e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	2301      	movs	r3, #1
 80042f2:	6163      	str	r3, [r4, #20]
 80042f4:	b002      	add	sp, #8
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	466a      	mov	r2, sp
 80042fa:	ab01      	add	r3, sp, #4
 80042fc:	f7ff ffc8 	bl	8004290 <__swhatbuf_r>
 8004300:	9900      	ldr	r1, [sp, #0]
 8004302:	4605      	mov	r5, r0
 8004304:	4630      	mov	r0, r6
 8004306:	f000 f891 	bl	800442c <_malloc_r>
 800430a:	b948      	cbnz	r0, 8004320 <__smakebuf_r+0x44>
 800430c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004310:	059a      	lsls	r2, r3, #22
 8004312:	d4ef      	bmi.n	80042f4 <__smakebuf_r+0x18>
 8004314:	f023 0303 	bic.w	r3, r3, #3
 8004318:	f043 0302 	orr.w	r3, r3, #2
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	e7e3      	b.n	80042e8 <__smakebuf_r+0xc>
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <__smakebuf_r+0x7c>)
 8004322:	62b3      	str	r3, [r6, #40]	; 0x28
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	6020      	str	r0, [r4, #0]
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	9b00      	ldr	r3, [sp, #0]
 8004330:	6120      	str	r0, [r4, #16]
 8004332:	6163      	str	r3, [r4, #20]
 8004334:	9b01      	ldr	r3, [sp, #4]
 8004336:	b15b      	cbz	r3, 8004350 <__smakebuf_r+0x74>
 8004338:	4630      	mov	r0, r6
 800433a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800433e:	f000 f971 	bl	8004624 <_isatty_r>
 8004342:	b128      	cbz	r0, 8004350 <__smakebuf_r+0x74>
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	81a3      	strh	r3, [r4, #12]
 8004350:	89a0      	ldrh	r0, [r4, #12]
 8004352:	4305      	orrs	r5, r0
 8004354:	81a5      	strh	r5, [r4, #12]
 8004356:	e7cd      	b.n	80042f4 <__smakebuf_r+0x18>
 8004358:	080040e9 	.word	0x080040e9

0800435c <_free_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4605      	mov	r5, r0
 8004360:	2900      	cmp	r1, #0
 8004362:	d040      	beq.n	80043e6 <_free_r+0x8a>
 8004364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004368:	1f0c      	subs	r4, r1, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfb8      	it	lt
 800436e:	18e4      	addlt	r4, r4, r3
 8004370:	f000 f97a 	bl	8004668 <__malloc_lock>
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <_free_r+0x8c>)
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	b933      	cbnz	r3, 8004388 <_free_r+0x2c>
 800437a:	6063      	str	r3, [r4, #4]
 800437c:	6014      	str	r4, [r2, #0]
 800437e:	4628      	mov	r0, r5
 8004380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004384:	f000 b976 	b.w	8004674 <__malloc_unlock>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d908      	bls.n	800439e <_free_r+0x42>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	1821      	adds	r1, r4, r0
 8004390:	428b      	cmp	r3, r1
 8004392:	bf01      	itttt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	1809      	addeq	r1, r1, r0
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	e7ed      	b.n	800437a <_free_r+0x1e>
 800439e:	461a      	mov	r2, r3
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b10b      	cbz	r3, 80043a8 <_free_r+0x4c>
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d9fa      	bls.n	800439e <_free_r+0x42>
 80043a8:	6811      	ldr	r1, [r2, #0]
 80043aa:	1850      	adds	r0, r2, r1
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d10b      	bne.n	80043c8 <_free_r+0x6c>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	4401      	add	r1, r0
 80043b4:	1850      	adds	r0, r2, r1
 80043b6:	4283      	cmp	r3, r0
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	d1e0      	bne.n	800437e <_free_r+0x22>
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4401      	add	r1, r0
 80043c2:	6011      	str	r1, [r2, #0]
 80043c4:	6053      	str	r3, [r2, #4]
 80043c6:	e7da      	b.n	800437e <_free_r+0x22>
 80043c8:	d902      	bls.n	80043d0 <_free_r+0x74>
 80043ca:	230c      	movs	r3, #12
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	e7d6      	b.n	800437e <_free_r+0x22>
 80043d0:	6820      	ldr	r0, [r4, #0]
 80043d2:	1821      	adds	r1, r4, r0
 80043d4:	428b      	cmp	r3, r1
 80043d6:	bf01      	itttt	eq
 80043d8:	6819      	ldreq	r1, [r3, #0]
 80043da:	685b      	ldreq	r3, [r3, #4]
 80043dc:	1809      	addeq	r1, r1, r0
 80043de:	6021      	streq	r1, [r4, #0]
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	6054      	str	r4, [r2, #4]
 80043e4:	e7cb      	b.n	800437e <_free_r+0x22>
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20002274 	.word	0x20002274

080043ec <sbrk_aligned>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	4e0e      	ldr	r6, [pc, #56]	; (8004428 <sbrk_aligned+0x3c>)
 80043f0:	460c      	mov	r4, r1
 80043f2:	6831      	ldr	r1, [r6, #0]
 80043f4:	4605      	mov	r5, r0
 80043f6:	b911      	cbnz	r1, 80043fe <sbrk_aligned+0x12>
 80043f8:	f000 f88c 	bl	8004514 <_sbrk_r>
 80043fc:	6030      	str	r0, [r6, #0]
 80043fe:	4621      	mov	r1, r4
 8004400:	4628      	mov	r0, r5
 8004402:	f000 f887 	bl	8004514 <_sbrk_r>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	d00a      	beq.n	8004420 <sbrk_aligned+0x34>
 800440a:	1cc4      	adds	r4, r0, #3
 800440c:	f024 0403 	bic.w	r4, r4, #3
 8004410:	42a0      	cmp	r0, r4
 8004412:	d007      	beq.n	8004424 <sbrk_aligned+0x38>
 8004414:	1a21      	subs	r1, r4, r0
 8004416:	4628      	mov	r0, r5
 8004418:	f000 f87c 	bl	8004514 <_sbrk_r>
 800441c:	3001      	adds	r0, #1
 800441e:	d101      	bne.n	8004424 <sbrk_aligned+0x38>
 8004420:	f04f 34ff 	mov.w	r4, #4294967295
 8004424:	4620      	mov	r0, r4
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	20002278 	.word	0x20002278

0800442c <_malloc_r>:
 800442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004430:	1ccd      	adds	r5, r1, #3
 8004432:	f025 0503 	bic.w	r5, r5, #3
 8004436:	3508      	adds	r5, #8
 8004438:	2d0c      	cmp	r5, #12
 800443a:	bf38      	it	cc
 800443c:	250c      	movcc	r5, #12
 800443e:	2d00      	cmp	r5, #0
 8004440:	4607      	mov	r7, r0
 8004442:	db01      	blt.n	8004448 <_malloc_r+0x1c>
 8004444:	42a9      	cmp	r1, r5
 8004446:	d905      	bls.n	8004454 <_malloc_r+0x28>
 8004448:	230c      	movs	r3, #12
 800444a:	2600      	movs	r6, #0
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4630      	mov	r0, r6
 8004450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004454:	4e2e      	ldr	r6, [pc, #184]	; (8004510 <_malloc_r+0xe4>)
 8004456:	f000 f907 	bl	8004668 <__malloc_lock>
 800445a:	6833      	ldr	r3, [r6, #0]
 800445c:	461c      	mov	r4, r3
 800445e:	bb34      	cbnz	r4, 80044ae <_malloc_r+0x82>
 8004460:	4629      	mov	r1, r5
 8004462:	4638      	mov	r0, r7
 8004464:	f7ff ffc2 	bl	80043ec <sbrk_aligned>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	4604      	mov	r4, r0
 800446c:	d14d      	bne.n	800450a <_malloc_r+0xde>
 800446e:	6834      	ldr	r4, [r6, #0]
 8004470:	4626      	mov	r6, r4
 8004472:	2e00      	cmp	r6, #0
 8004474:	d140      	bne.n	80044f8 <_malloc_r+0xcc>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	4631      	mov	r1, r6
 800447a:	4638      	mov	r0, r7
 800447c:	eb04 0803 	add.w	r8, r4, r3
 8004480:	f000 f848 	bl	8004514 <_sbrk_r>
 8004484:	4580      	cmp	r8, r0
 8004486:	d13a      	bne.n	80044fe <_malloc_r+0xd2>
 8004488:	6821      	ldr	r1, [r4, #0]
 800448a:	3503      	adds	r5, #3
 800448c:	1a6d      	subs	r5, r5, r1
 800448e:	f025 0503 	bic.w	r5, r5, #3
 8004492:	3508      	adds	r5, #8
 8004494:	2d0c      	cmp	r5, #12
 8004496:	bf38      	it	cc
 8004498:	250c      	movcc	r5, #12
 800449a:	4638      	mov	r0, r7
 800449c:	4629      	mov	r1, r5
 800449e:	f7ff ffa5 	bl	80043ec <sbrk_aligned>
 80044a2:	3001      	adds	r0, #1
 80044a4:	d02b      	beq.n	80044fe <_malloc_r+0xd2>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	442b      	add	r3, r5
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	e00e      	b.n	80044cc <_malloc_r+0xa0>
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	1b52      	subs	r2, r2, r5
 80044b2:	d41e      	bmi.n	80044f2 <_malloc_r+0xc6>
 80044b4:	2a0b      	cmp	r2, #11
 80044b6:	d916      	bls.n	80044e6 <_malloc_r+0xba>
 80044b8:	1961      	adds	r1, r4, r5
 80044ba:	42a3      	cmp	r3, r4
 80044bc:	6025      	str	r5, [r4, #0]
 80044be:	bf18      	it	ne
 80044c0:	6059      	strne	r1, [r3, #4]
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	bf08      	it	eq
 80044c6:	6031      	streq	r1, [r6, #0]
 80044c8:	5162      	str	r2, [r4, r5]
 80044ca:	604b      	str	r3, [r1, #4]
 80044cc:	4638      	mov	r0, r7
 80044ce:	f104 060b 	add.w	r6, r4, #11
 80044d2:	f000 f8cf 	bl	8004674 <__malloc_unlock>
 80044d6:	f026 0607 	bic.w	r6, r6, #7
 80044da:	1d23      	adds	r3, r4, #4
 80044dc:	1af2      	subs	r2, r6, r3
 80044de:	d0b6      	beq.n	800444e <_malloc_r+0x22>
 80044e0:	1b9b      	subs	r3, r3, r6
 80044e2:	50a3      	str	r3, [r4, r2]
 80044e4:	e7b3      	b.n	800444e <_malloc_r+0x22>
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	bf0c      	ite	eq
 80044ec:	6032      	streq	r2, [r6, #0]
 80044ee:	605a      	strne	r2, [r3, #4]
 80044f0:	e7ec      	b.n	80044cc <_malloc_r+0xa0>
 80044f2:	4623      	mov	r3, r4
 80044f4:	6864      	ldr	r4, [r4, #4]
 80044f6:	e7b2      	b.n	800445e <_malloc_r+0x32>
 80044f8:	4634      	mov	r4, r6
 80044fa:	6876      	ldr	r6, [r6, #4]
 80044fc:	e7b9      	b.n	8004472 <_malloc_r+0x46>
 80044fe:	230c      	movs	r3, #12
 8004500:	4638      	mov	r0, r7
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	f000 f8b6 	bl	8004674 <__malloc_unlock>
 8004508:	e7a1      	b.n	800444e <_malloc_r+0x22>
 800450a:	6025      	str	r5, [r4, #0]
 800450c:	e7de      	b.n	80044cc <_malloc_r+0xa0>
 800450e:	bf00      	nop
 8004510:	20002274 	.word	0x20002274

08004514 <_sbrk_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	2300      	movs	r3, #0
 8004518:	4d05      	ldr	r5, [pc, #20]	; (8004530 <_sbrk_r+0x1c>)
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fc ffb2 	bl	8001488 <_sbrk>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_sbrk_r+0x1a>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_sbrk_r+0x1a>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	2000227c 	.word	0x2000227c

08004534 <__sread>:
 8004534:	b510      	push	{r4, lr}
 8004536:	460c      	mov	r4, r1
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	f000 f8a0 	bl	8004680 <_read_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	bfab      	itete	ge
 8004544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004546:	89a3      	ldrhlt	r3, [r4, #12]
 8004548:	181b      	addge	r3, r3, r0
 800454a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800454e:	bfac      	ite	ge
 8004550:	6563      	strge	r3, [r4, #84]	; 0x54
 8004552:	81a3      	strhlt	r3, [r4, #12]
 8004554:	bd10      	pop	{r4, pc}

08004556 <__swrite>:
 8004556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	461f      	mov	r7, r3
 800455c:	898b      	ldrh	r3, [r1, #12]
 800455e:	4605      	mov	r5, r0
 8004560:	05db      	lsls	r3, r3, #23
 8004562:	460c      	mov	r4, r1
 8004564:	4616      	mov	r6, r2
 8004566:	d505      	bpl.n	8004574 <__swrite+0x1e>
 8004568:	2302      	movs	r3, #2
 800456a:	2200      	movs	r2, #0
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	f000 f868 	bl	8004644 <_lseek_r>
 8004574:	89a3      	ldrh	r3, [r4, #12]
 8004576:	4632      	mov	r2, r6
 8004578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800457c:	81a3      	strh	r3, [r4, #12]
 800457e:	4628      	mov	r0, r5
 8004580:	463b      	mov	r3, r7
 8004582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800458a:	f000 b817 	b.w	80045bc <_write_r>

0800458e <__sseek>:
 800458e:	b510      	push	{r4, lr}
 8004590:	460c      	mov	r4, r1
 8004592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004596:	f000 f855 	bl	8004644 <_lseek_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	bf15      	itete	ne
 80045a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80045a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045aa:	81a3      	strheq	r3, [r4, #12]
 80045ac:	bf18      	it	ne
 80045ae:	81a3      	strhne	r3, [r4, #12]
 80045b0:	bd10      	pop	{r4, pc}

080045b2 <__sclose>:
 80045b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b6:	f000 b813 	b.w	80045e0 <_close_r>
	...

080045bc <_write_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	2200      	movs	r2, #0
 80045c6:	4d05      	ldr	r5, [pc, #20]	; (80045dc <_write_r+0x20>)
 80045c8:	602a      	str	r2, [r5, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f7fc ff0f 	bl	80013ee <_write>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_write_r+0x1e>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_write_r+0x1e>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	2000227c 	.word	0x2000227c

080045e0 <_close_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	2300      	movs	r3, #0
 80045e4:	4d05      	ldr	r5, [pc, #20]	; (80045fc <_close_r+0x1c>)
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc ff1b 	bl	8001426 <_close>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_close_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_close_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	2000227c 	.word	0x2000227c

08004600 <_fstat_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	2300      	movs	r3, #0
 8004604:	4d06      	ldr	r5, [pc, #24]	; (8004620 <_fstat_r+0x20>)
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	f7fc ff15 	bl	800143c <_fstat>
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	d102      	bne.n	800461c <_fstat_r+0x1c>
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	b103      	cbz	r3, 800461c <_fstat_r+0x1c>
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	2000227c 	.word	0x2000227c

08004624 <_isatty_r>:
 8004624:	b538      	push	{r3, r4, r5, lr}
 8004626:	2300      	movs	r3, #0
 8004628:	4d05      	ldr	r5, [pc, #20]	; (8004640 <_isatty_r+0x1c>)
 800462a:	4604      	mov	r4, r0
 800462c:	4608      	mov	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fc ff13 	bl	800145a <_isatty>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d102      	bne.n	800463e <_isatty_r+0x1a>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	b103      	cbz	r3, 800463e <_isatty_r+0x1a>
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	bd38      	pop	{r3, r4, r5, pc}
 8004640:	2000227c 	.word	0x2000227c

08004644 <_lseek_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	2200      	movs	r2, #0
 800464e:	4d05      	ldr	r5, [pc, #20]	; (8004664 <_lseek_r+0x20>)
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7fc ff0b 	bl	800146e <_lseek>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_lseek_r+0x1e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_lseek_r+0x1e>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	2000227c 	.word	0x2000227c

08004668 <__malloc_lock>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <__malloc_lock+0x8>)
 800466a:	f7ff be0f 	b.w	800428c <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	20002270 	.word	0x20002270

08004674 <__malloc_unlock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_unlock+0x8>)
 8004676:	f7ff be0a 	b.w	800428e <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	20002270 	.word	0x20002270

08004680 <_read_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	2200      	movs	r2, #0
 800468a:	4d05      	ldr	r5, [pc, #20]	; (80046a0 <_read_r+0x20>)
 800468c:	602a      	str	r2, [r5, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	f7fc fe90 	bl	80013b4 <_read>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_read_r+0x1e>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	b103      	cbz	r3, 800469e <_read_r+0x1e>
 800469c:	6023      	str	r3, [r4, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	2000227c 	.word	0x2000227c

080046a4 <_init>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr

080046b0 <_fini>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr
